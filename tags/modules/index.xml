<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>modules on Adam Gold</title>
    
    
    
    <link>https://adamgold.github.io/tags/modules/</link>
    <description>Recent content in modules on Adam Gold</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Mar 2019 22:57:10 +0300</lastBuildDate>
    
	<atom:link href="https://adamgold.github.io/tags/modules/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Awesome Python modules you probably arenâ€™t using (but should be)</title>
      <link>https://adamgold.github.io/posts/awesome-python-module-you-probably-arent-using/</link>
      <pubDate>Tue, 05 Mar 2019 22:57:10 +0300</pubDate>
      
      <guid>https://adamgold.github.io/posts/awesome-python-module-you-probably-arent-using/</guid>
      <description>
        
          &lt;img src=&#34;https://adamgold.github.io/img/covers/awesome-python-modules.png&#34;/&gt;
          
        
        
        &lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt; is a beautiful language, and it contains many built-in modules that aim to help us write better, prettier code.&lt;/p&gt;

&lt;figure &gt;
    
        &lt;img class=&#34;center&#34; src=&#34;https://adamgold.github.io/img/posts/python_zen.png&#34;
             /&gt;
        
    
&lt;/figure&gt;

&lt;h3 id=&#34;objective&#34;&gt;Objective&lt;/h3&gt;
&lt;p&gt;Throughout this article, we will use some lesser-known modules and methods that I think can improve the way we code - both in visibillity and in efficiency.&lt;/p&gt;
&lt;iframe
	src=&#34;https://giphy.com/embed/wHoKXCPj2NBcIoE3ZQ&#34;
	width=&#34;500&#34;
	height=&#34;400&#34;
	frameborder=&#34;0&#34;
	class=&#34;center&#34;
	allowfullscreen
&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;namedtuple&#34;&gt;NamedTuple&lt;/h3&gt;
&lt;p&gt;I believe that some of you already know the more popular &lt;code&gt;namedtuple&lt;/code&gt; from the &lt;code&gt;collections&lt;/code&gt; module (if you don&amp;rsquo;t - &lt;a href=&#34;https://docs.python.org/3.6/library/collections.html#collections.namedtuple&#34;&gt;check it out&lt;/a&gt;), but since Python 3.6, a new class was added to the &lt;code&gt;typing&lt;/code&gt; module: &lt;code&gt;NamedTuple&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NamedTuple&lt;/code&gt; is actually a typed version of &lt;code&gt;NamedTuple&lt;/code&gt;, and in my opinion, it is more readable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; typing

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BetterLookingArticle&lt;/span&gt;(typing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NamedTuple):
   &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;:     title: str
   &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;:     id: int
   &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;:     description: str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No description given.&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;:

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]: BetterLookingArticle(title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Python is cool.&amp;#34;&lt;/span&gt;, id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
BetterLookingArticle(title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Python is cool.&amp;#39;&lt;/span&gt;, id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, description&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;No description given.&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s the &lt;code&gt;namedtuple&lt;/code&gt; version:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; collections

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: Article &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;namedtuple(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Article&amp;#34;&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;])

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]: Article(title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Python is cool.&amp;#34;&lt;/span&gt;, id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, description&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
Article(title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Python is cool.&amp;#39;&lt;/span&gt;, description&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Both classes are pretty similar and can save you and your fellow developers a lot of time trying to understand your code.&lt;/p&gt;
&lt;h3 id=&#34;arrayarray&#34;&gt;array.array&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Efficient arrays of numeric values. Arrays are sequence types and behave very much like lists, except that the type of objects stored in them is constrained. - &lt;a href=&#34;https://docs.python.org/3.6/library/array.html&#34;&gt;Python docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When using the &lt;code&gt;array&lt;/code&gt; module, we need to instantiate it with a typecode, which is the type all of its elements will use. Let&amp;rsquo;s compare time efficiency with a normal list, writing many integers to a file (using &lt;a href=&#34;https://docs.python.org/3.7/library/pickle.html&#34;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; module for a regular list):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; array

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pickle

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]: double_array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; array&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i&amp;#34;&lt;/span&gt;, range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;))
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: start_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time()
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;array_temp.bin&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wb&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;:     double_array&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tofile(f)
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: array_end_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; start_time

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: int_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;))
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: start_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time()
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;list_temp.bin&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wb&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;:     pickle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(int_list, f)
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: list_end_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; start_time

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]: &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;It took {array_end_time} for int_array to complete&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;It took {list_end_time} for int_list to complete&amp;#34;&lt;/span&gt;)
It took &lt;span style=&#34;color:#ae81ff&#34;&gt;0.006399869918823242&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; int_array to complete
It took &lt;span style=&#34;color:#ae81ff&#34;&gt;0.03600811958312988&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; int_list to complete
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.03600811958312988&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.006399869918823242&lt;/span&gt;
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;5.62638304213389&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;5 times&lt;/strong&gt; faster. That&amp;rsquo;s alot. Of course it also depends on the &lt;code&gt;pickle&lt;/code&gt; module, but still - the array is way more compact than the list. So if you are using simple numeric values, you should consider using the &lt;code&gt;array&lt;/code&gt; module.&lt;/p&gt;
&lt;h3 id=&#34;itertoolscombinations&#34;&gt;itertools.combinations&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;itertools&lt;/code&gt; is an impressive module. It has so many different time-saving methods, all of them are listed &lt;a href=&#34;https://docs.python.org/3/library/itertools.html&#34;&gt;here&lt;/a&gt;. There&amp;rsquo;s even a GitHub repository containing &lt;a href=&#34;https://github.com/erikrose/more-itertools&#34;&gt;More Itertools&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;I got to use the &lt;code&gt;combinations&lt;/code&gt; method this week and I thought I&amp;rsquo;d share it. This method takes an iterable and an integer as arguments, and creates a generator consisting of all possible combinations of the iterable with a maximum length of the integer given, without duplication:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; itertools

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;]: list(itertools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;combinations([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
[(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;dictfromkeys&#34;&gt;dict.fromkeys&lt;/h3&gt;
&lt;p&gt;A quick and beatiful way of creating a dict with default values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: dict&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fromkeys([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key3&amp;#34;&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DEFAULT_VALUE&amp;#34;&lt;/span&gt;)
{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key1&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DEFAULT_VALUE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key2&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DEFAULT_VALUE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key3&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DEFAULT_VALUE&amp;#39;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;last-but-not-least---the-dis-module&#34;&gt;Last but not least - the &lt;code&gt;dis&lt;/code&gt; module&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.python.org/3/library/dis.html#module-dis&#34;&gt;&lt;code&gt;dis&lt;/code&gt;&lt;/a&gt; module supports the analysis of CPython &lt;a href=&#34;https://docs.python.org/3/glossary.html#term-bytecode&#34;&gt;bytecode&lt;/a&gt; by disassembling it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As you may or may not know, Python compiles source code to a set of instructions called &amp;ldquo;bytecode&amp;rdquo;. The &lt;code&gt;dis&lt;/code&gt; module helps us handle these instructions, and it&amp;rsquo;s a great debugging tool.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example from the &lt;a href=&#34;http://shop.oreilly.com/product/0636920032519.do&#34;&gt;Fluent Python book&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;]: t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]: t[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;]
&lt;span style=&#34;color:#f92672&#34;&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;TypeError&lt;/span&gt;                                 Traceback (most recent call last)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ipython&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;input&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;af836a8d44a2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;module&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;----&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; t[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;]

&lt;span style=&#34;color:#a6e22e&#34;&gt;TypeError&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tuple&amp;#39;&lt;/span&gt; object does &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; support item assignment

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]: t
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]: (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We got an error - but the operation still succeeded. How come? Well, if we look at the bytecode (I added comments for the important parts):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;]: dis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t[a] += b&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;           &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; LOAD_NAME                &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (t)
              &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; LOAD_NAME                &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (a)
              &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; DUP_TOP_TWO
              &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; BINARY_SUBSCR
              &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; LOAD_NAME                &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (b)
             &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; INPLACE_ADD &lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; (value &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; t[a]) &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; succeeds because list &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; mutable
             &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; ROT_THREE
             &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; STORE_SUBSCR &lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; Assign t[a] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; our list &lt;span style=&#34;color:#f92672&#34;&gt;--&amp;gt;&lt;/span&gt; Fails, t[a] &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; immutable&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
             &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; LOAD_CONST               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (None)
             &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; RETURN_VALUE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
        </description>
    </item>
    
  </channel>
</rss>